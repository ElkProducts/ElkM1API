/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_ElkM1APIJNI = NULL;
    jmethodID director_method_ids[11];
  }
}

#include "ElkM1Definition.h"
#include "SwigCallbacks.h"
#include "ElkM1API.h"
#include "ElkM1Monitor.h"
#include "ElkM1AsciiAPI.h"
#include "ElkM1Connection.h"
#include "ElkM1SirenWords.h"
#include "ElkC1M1Tunnel.h"


#include <stdexcept>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN bool std_vector_Sl_bool_Sg__get(std::vector< bool > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_bool_Sg__set(std::vector< bool > *self,int i,std::vector< bool >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< char >::const_reference std_vector_Sl_char_Sg__get(std::vector< char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_char_Sg__set(std::vector< char > *self,int i,std::vector< char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< unsigned short >::const_reference std_vector_Sl_uint16_t_Sg__get(std::vector< uint16_t > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__set(std::vector< uint16_t > *self,int i,std::vector< unsigned short >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Elk::LogEntry >::const_reference std_vector_Sl_Elk_LogEntry_Sg__get(std::vector< Elk::LogEntry > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__set(std::vector< Elk::LogEntry > *self,int i,std::vector< Elk::LogEntry >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Elk::ArmStatus >::const_reference std_vector_Sl_Elk_ArmStatus_Sg__get(std::vector< Elk::ArmStatus > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__set(std::vector< Elk::ArmStatus > *self,int i,std::vector< Elk::ArmStatus >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Elk::ZoneState >::const_reference std_vector_Sl_Elk_ZoneState_Sg__get(std::vector< Elk::ZoneState > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__set(std::vector< Elk::ZoneState > *self,int i,std::vector< Elk::ZoneState >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::pair< int,Elk::TemperatureDevice > >::const_reference std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__get(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__set(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int i,std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Elk::SChimeMode >::const_reference std_vector_Sl_Elk_SChimeMode_Sg__get(std::vector< Elk::SChimeMode > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__set(std::vector< Elk::SChimeMode > *self,int i,std::vector< Elk::SChimeMode >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< Elk::SZoneDefinition >::const_reference std_vector_Sl_Elk_SZoneDefinition_Sg__get(std::vector< Elk::SZoneDefinition > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__set(std::vector< Elk::SZoneDefinition > *self,int i,std::vector< Elk::SZoneDefinition >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig_wrap_java.h"

SwigDirector_BoolCallback::SwigDirector_BoolCallback(JNIEnv *jenv) : BoolCallback(), Swig::Director(jenv) {
}

void SwigDirector_BoolCallback::run(bool arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jboolean jarg1  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method BoolCallback::run.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg1 = (jboolean) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[0], swigjobj, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in BoolCallback::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_BoolCallback::~SwigDirector_BoolCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_BoolCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "(Z)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("elkm1api/BoolCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_IntCallback::SwigDirector_IntCallback(JNIEnv *jenv) : IntCallback(), Swig::Director(jenv) {
}

void SwigDirector_IntCallback::run(int arg1) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jarg1  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method IntCallback::run.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jarg1 = (jint) arg1;
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[1], swigjobj, jarg1);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in IntCallback::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_IntCallback::~SwigDirector_IntCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_IntCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "(I)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("elkm1api/IntCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ArmStatusVectorCallback::SwigDirector_ArmStatusVectorCallback(JNIEnv *jenv) : ArmStatusVectorCallback(), Swig::Director(jenv) {
}

void SwigDirector_ArmStatusVectorCallback::run(std::vector< Elk::ArmStatus > status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstatus  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method ArmStatusVectorCallback::run.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jstatus = 0;
    *((std::vector< Elk::ArmStatus > **)&jstatus) = new std::vector< Elk::ArmStatus >((const std::vector< Elk::ArmStatus > &)status); 
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[2], swigjobj, jstatus);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in ArmStatusVectorCallback::run ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

SwigDirector_ArmStatusVectorCallback::~SwigDirector_ArmStatusVectorCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ArmStatusVectorCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "run", "(Lelkm1api/ArmStatusVector;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("elkm1api/ArmStatusVectorCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 1; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_M1Connection::SwigDirector_M1Connection(JNIEnv *jenv) : Elk::M1Connection(), Swig::Director(jenv) {
}

SwigDirector_M1Connection::~SwigDirector_M1Connection() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_M1Connection::Connect(std::string location, int port) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jlocation  ;
  jint jport  ;
  
  if (!swig_override[0]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Elk::M1Connection::Connect.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlocation = jenv->NewStringUTF((&location)->c_str());
    Swig::LocalRefGuard location_refguard(jenv, jlocation); 
    jport = (jint) port;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[3], swigjobj, jlocation, jport);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::M1Connection::Connect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_M1Connection::Disconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Elk::M1Connection::Disconnect.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[4], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::M1Connection::Disconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_M1Connection::Send(std::vector< char > data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  
  if (!swig_override[2]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Elk::M1Connection::Send.");
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::vector< char > **)&jdata) = new std::vector< char >((const std::vector< char > &)data); 
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[5], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::M1Connection::Send ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< char > SwigDirector_M1Connection::Recieve() {
  std::vector< char > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< char > *argp ;
  
  if (!swig_override[3]) {
    SWIG_JavaThrowException(JNIEnvWrapper(this).getJNIEnv(), SWIG_JavaDirectorPureVirtual, "Attempted to invoke pure virtual method Elk::M1Connection::Recieve.");
    return c_result;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[6], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< char > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< char >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::M1Connection::Recieve ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_M1Connection::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Connect", "(Ljava/lang/String;I)Z", NULL 
    },
    {
      "Disconnect", "()V", NULL 
    },
    {
      "Send", "(Lelkm1api/CharVector;)V", NULL 
    },
    {
      "Recieve", "()Lelkm1api/CharVector;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("elkm1api/M1Connection");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_C1M1Tunnel::SwigDirector_C1M1Tunnel(JNIEnv *jenv, Elk::M1Connection *underlying) : Elk::C1M1Tunnel(underlying), Swig::Director(jenv) {
}

SwigDirector_C1M1Tunnel::~SwigDirector_C1M1Tunnel() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


bool SwigDirector_C1M1Tunnel::Connect(std::string location, int port) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jlocation  ;
  jint jport  ;
  
  if (!swig_override[0]) {
    return Elk::C1M1Tunnel::Connect(location,port);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jlocation = jenv->NewStringUTF((&location)->c_str());
    Swig::LocalRefGuard location_refguard(jenv, jlocation); 
    jport = (jint) port;
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[7], swigjobj, jlocation, jport);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::C1M1Tunnel::Connect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_C1M1Tunnel::Disconnect() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[1]) {
    Elk::C1M1Tunnel::Disconnect();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[8], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::C1M1Tunnel::Disconnect ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_C1M1Tunnel::Send(std::vector< char > data) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jdata  ;
  
  if (!swig_override[2]) {
    Elk::C1M1Tunnel::Send(data);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jdata = 0;
    *((std::vector< char > **)&jdata) = new std::vector< char >((const std::vector< char > &)data); 
    jenv->CallStaticVoidMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[9], swigjobj, jdata);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::C1M1Tunnel::Send ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

std::vector< char > SwigDirector_C1M1Tunnel::Recieve() {
  std::vector< char > c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  std::vector< char > *argp ;
  
  if (!swig_override[3]) {
    return Elk::C1M1Tunnel::Recieve();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_ElkM1APIJNI, Swig::director_method_ids[10], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
    argp = *(std::vector< char > **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type std::vector< char >");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in Elk::C1M1Tunnel::Recieve ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_C1M1Tunnel::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "Connect", "(Ljava/lang/String;I)Z", NULL 
    },
    {
      "Disconnect", "()V", NULL 
    },
    {
      "Send", "(Lelkm1api/CharVector;)V", NULL 
    },
    {
      "Recieve", "()Lelkm1api/CharVector;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("elkm1api/C1M1Tunnel");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1BoolVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< bool > *)new std::vector< bool >();
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1BoolVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bool >::size_type arg1 ;
  std::vector< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< bool >::size_type)jarg1; 
  result = (std::vector< bool > *)new std::vector< bool >(arg1);
  *(std::vector< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  result = (bool)((std::vector< bool > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::value_type *arg2 = 0 ;
  std::vector< bool >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< bool >::value_type const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool >::value_type *arg3 = 0 ;
  std::vector< bool >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< bool > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__set(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1BoolVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bool > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1CharVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< char > *)new std::vector< char >();
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1CharVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< char >::size_type arg1 ;
  std::vector< char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< char >::size_type)jarg1; 
  result = (std::vector< char > *)new std::vector< char >(arg1);
  *(std::vector< char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  result = (bool)((std::vector< char > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  std::vector< char >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  temp2 = (std::vector< char >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
}


SWIGEXPORT jchar JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jchar jresult = 0 ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jchar)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_CharVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jchar jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  std::vector< char >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< char >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__set(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1CharVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< char > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1UShortVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >();
  *(std::vector< uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1UShortVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< unsigned short >::size_type arg1 ;
  std::vector< uint16_t > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< unsigned short >::size_type)jarg1; 
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >(arg1);
  *(std::vector< uint16_t > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  result = (bool)((std::vector< uint16_t > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::value_type *arg2 = 0 ;
  std::vector< unsigned short >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  temp2 = (std::vector< unsigned short >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< unsigned short >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short >::value_type *) &std_vector_Sl_uint16_t_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UShortVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short >::value_type *arg3 = 0 ;
  std::vector< unsigned short >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< unsigned short >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__set(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1UShortVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< uint16_t > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1LogEntryVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Elk::LogEntry > *)new std::vector< Elk::LogEntry >();
  *(std::vector< Elk::LogEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1LogEntryVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Elk::LogEntry >::size_type arg1 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Elk::LogEntry >::size_type)jarg1; 
  result = (std::vector< Elk::LogEntry > *)new std::vector< Elk::LogEntry >(arg1);
  *(std::vector< Elk::LogEntry > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  result = ((std::vector< Elk::LogEntry > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  result = ((std::vector< Elk::LogEntry > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  arg2 = (std::vector< Elk::LogEntry >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  result = (bool)((std::vector< Elk::LogEntry > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  arg2 = *(std::vector< Elk::LogEntry >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::LogEntry >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Elk::LogEntry >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  std::vector< Elk::LogEntry >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::LogEntry >::value_type *) &std_vector_Sl_Elk_LogEntry_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Elk::LogEntry >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntryVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  std::vector< Elk::LogEntry >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Elk::LogEntry >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::LogEntry >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__set(arg1,arg2,(Elk::LogEntry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1LogEntryVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Elk::LogEntry > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ArmStatusVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Elk::ArmStatus > *)new std::vector< Elk::ArmStatus >();
  *(std::vector< Elk::ArmStatus > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ArmStatusVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Elk::ArmStatus >::size_type arg1 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Elk::ArmStatus >::size_type)jarg1; 
  result = (std::vector< Elk::ArmStatus > *)new std::vector< Elk::ArmStatus >(arg1);
  *(std::vector< Elk::ArmStatus > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  result = ((std::vector< Elk::ArmStatus > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  result = ((std::vector< Elk::ArmStatus > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  arg2 = (std::vector< Elk::ArmStatus >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  result = (bool)((std::vector< Elk::ArmStatus > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  arg2 = *(std::vector< Elk::ArmStatus >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::ArmStatus >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Elk::ArmStatus >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  std::vector< Elk::ArmStatus >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::ArmStatus >::value_type *) &std_vector_Sl_Elk_ArmStatus_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Elk::ArmStatus >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  std::vector< Elk::ArmStatus >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Elk::ArmStatus >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::ArmStatus >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__set(arg1,arg2,(Elk::ArmStatus const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ArmStatusVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Elk::ArmStatus > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ZoneStateVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Elk::ZoneState > *)new std::vector< Elk::ZoneState >();
  *(std::vector< Elk::ZoneState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ZoneStateVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Elk::ZoneState >::size_type arg1 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Elk::ZoneState >::size_type)jarg1; 
  result = (std::vector< Elk::ZoneState > *)new std::vector< Elk::ZoneState >(arg1);
  *(std::vector< Elk::ZoneState > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  result = ((std::vector< Elk::ZoneState > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  result = ((std::vector< Elk::ZoneState > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  arg2 = (std::vector< Elk::ZoneState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  result = (bool)((std::vector< Elk::ZoneState > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  arg2 = *(std::vector< Elk::ZoneState >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::ZoneState >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Elk::ZoneState >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  std::vector< Elk::ZoneState >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::ZoneState >::value_type *) &std_vector_Sl_Elk_ZoneState_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Elk::ZoneState >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneStateVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  std::vector< Elk::ZoneState >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Elk::ZoneState >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::ZoneState >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__set(arg1,arg2,(Elk::ZoneState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ZoneStateVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Elk::ZoneState > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1TempDevicePair_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >();
  *(std::pair< int,Elk::TemperatureDevice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1TempDevicePair_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  Elk::TemperatureDevice arg2 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >(arg1,arg2);
  *(std::pair< int,Elk::TemperatureDevice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1TempDevicePair_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = 0 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::pair< int,Elk::TemperatureDevice > const & reference is null");
    return 0;
  } 
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >((std::pair< int,Elk::TemperatureDevice > const &)*arg1);
  *(std::pair< int,Elk::TemperatureDevice > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePair_1first_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePair_1first_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1; 
  result = (int) ((arg1)->first);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePair_1second_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  Elk::TemperatureDevice arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePair_1second_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  Elk::TemperatureDevice result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1; 
  result = (Elk::TemperatureDevice) ((arg1)->second);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1TempDevicePair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::pair< int,Elk::TemperatureDevice > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1TempDevicePairVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)new std::vector< std::pair< int,Elk::TemperatureDevice > >();
  *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1TempDevicePairVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type arg1 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type)jarg1; 
  result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)new std::vector< std::pair< int,Elk::TemperatureDevice > >(arg1);
  *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  result = ((std::vector< std::pair< int,Elk::TemperatureDevice > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  result = ((std::vector< std::pair< int,Elk::TemperatureDevice > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  arg2 = (std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  result = (bool)((std::vector< std::pair< int,Elk::TemperatureDevice > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  arg2 = *(std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_TempDevicePairVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::pair< int,Elk::TemperatureDevice > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__set(arg1,arg2,(std::pair< int,Elk::TemperatureDevice > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1TempDevicePairVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ChimeModeVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Elk::SChimeMode > *)new std::vector< Elk::SChimeMode >();
  *(std::vector< Elk::SChimeMode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ChimeModeVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Elk::SChimeMode >::size_type arg1 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Elk::SChimeMode >::size_type)jarg1; 
  result = (std::vector< Elk::SChimeMode > *)new std::vector< Elk::SChimeMode >(arg1);
  *(std::vector< Elk::SChimeMode > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  result = ((std::vector< Elk::SChimeMode > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  result = ((std::vector< Elk::SChimeMode > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  arg2 = (std::vector< Elk::SChimeMode >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  result = (bool)((std::vector< Elk::SChimeMode > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  arg2 = *(std::vector< Elk::SChimeMode >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::SChimeMode >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Elk::SChimeMode >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  std::vector< Elk::SChimeMode >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::SChimeMode >::value_type *) &std_vector_Sl_Elk_SChimeMode_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Elk::SChimeMode >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ChimeModeVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  std::vector< Elk::SChimeMode >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Elk::SChimeMode >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::SChimeMode >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__set(arg1,arg2,(Elk::SChimeMode const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ChimeModeVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Elk::SChimeMode > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ZoneDefinitionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< Elk::SZoneDefinition > *)new std::vector< Elk::SZoneDefinition >();
  *(std::vector< Elk::SZoneDefinition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ZoneDefinitionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< Elk::SZoneDefinition >::size_type arg1 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< Elk::SZoneDefinition >::size_type)jarg1; 
  result = (std::vector< Elk::SZoneDefinition > *)new std::vector< Elk::SZoneDefinition >(arg1);
  *(std::vector< Elk::SZoneDefinition > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  result = ((std::vector< Elk::SZoneDefinition > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  result = ((std::vector< Elk::SZoneDefinition > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  arg2 = (std::vector< Elk::SZoneDefinition >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  result = (bool)((std::vector< Elk::SZoneDefinition > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  arg2 = *(std::vector< Elk::SZoneDefinition >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::SZoneDefinition >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< Elk::SZoneDefinition >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  std::vector< Elk::SZoneDefinition >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::SZoneDefinition >::value_type *) &std_vector_Sl_Elk_SZoneDefinition_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< Elk::SZoneDefinition >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneDefinitionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  std::vector< Elk::SZoneDefinition >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< Elk::SZoneDefinition >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< Elk::SZoneDefinition >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__set(arg1,arg2,(Elk::SZoneDefinition const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ZoneDefinitionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< Elk::SZoneDefinition > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1NOTREADY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_NOTREADY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1READY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_READY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1READYFORCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_READYFORCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1ARMEDEXITTIMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_ARMEDEXITTIMER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1ARMEDFORCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_ARMEDFORCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARMUPMODE_1ARMEDBYPASS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmUpMode)Elk::ARMUPMODE_ARMEDBYPASS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1ENTRANCE_1DELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_ENTRANCE_DELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1ALARM_1ABORT_1DELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_ALARM_ABORT_DELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1FIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_FIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1MEDICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_MEDICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1POLICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_POLICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1BURGLAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_BURGLAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1AUX1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_AUX1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1AUX2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_AUX2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1AUX3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_AUX3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1AUX4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_AUX4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1CARBON_1MONOXIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_CARBON_MONOXIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1EMERGENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_EMERGENCY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1FREEZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_FREEZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1GAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_GAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1HEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_HEAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1WATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_WATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1FIRE_1SUPERVISORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_FIRE_SUPERVISORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ALARMSTATE_1VERIFY_1FIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::AlarmState)Elk::ALARMSTATE_VERIFY_FIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ZONEDEF_1DISABLED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ZoneDefinition result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ZoneDefinition)Elk::ZONEDEF_DISABLED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ZONEDEF_1BURGLAR_1ENTRY_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ZoneDefinition result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ZoneDefinition)Elk::ZONEDEF_BURGLAR_ENTRY_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ZONEDEF_1BURGLAR_1ENTRY_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ZoneDefinition result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ZoneDefinition)Elk::ZONEDEF_BURGLAR_ENTRY_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SZoneDefinition_1zd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  Elk::ZoneDefinition arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SZoneDefinition **)&jarg1; 
  arg2 = (Elk::ZoneDefinition)jarg2; 
  if (arg1) (arg1)->zd = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SZoneDefinition_1zd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  Elk::ZoneDefinition result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SZoneDefinition **)&jarg1; 
  result = (Elk::ZoneDefinition) ((arg1)->zd);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1SZoneDefinition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::SZoneDefinition *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::SZoneDefinition *)new Elk::SZoneDefinition();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::SZoneDefinition **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1SZoneDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::SZoneDefinition **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1AWAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_AWAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1STAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_STAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1STAYINSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_STAYINSTANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1NIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_NIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1NIGHTINSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_NIGHTINSTANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1VACATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_VACATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1AWAYNEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_AWAYNEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ARM_1STAYNEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::ArmMode)Elk::ARM_STAYNEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_Sunday_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::Weekday result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::Weekday)Elk::Sunday;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SChimeMode_1cm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  Elk::ChimeMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SChimeMode **)&jarg1; 
  arg2 = (Elk::ChimeMode)jarg2; 
  if (arg1) (arg1)->cm = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SChimeMode_1cm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  Elk::ChimeMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SChimeMode **)&jarg1; 
  result = (Elk::ChimeMode) ((arg1)->cm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1SChimeMode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::SChimeMode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::SChimeMode *)new Elk::SChimeMode();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::SChimeMode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1SChimeMode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::SChimeMode **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_CLEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::clearMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::clearMethod)Elk::CLEAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_CLEAR_1WITH_1STAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::clearMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::clearMethod)Elk::CLEAR_WITH_STAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_CLEAR_1DISPLAY_1UNTIL_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::clearMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::clearMethod)Elk::CLEAR_DISPLAY_UNTIL_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_TEMPDEVICE_1ZONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::TemperatureDevice result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::TemperatureDevice)Elk::TEMPDEVICE_ZONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_TEMPDEVICE_1KEYPAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::TemperatureDevice result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::TemperatureDevice)Elk::TEMPDEVICE_KEYPAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_TEMPDEVICE_1THERMOSTAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::TemperatureDevice result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::TemperatureDevice)Elk::TEMPDEVICE_THERMOSTAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  arg2 = (Elk::ArmMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  result = (Elk::ArmMode) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1isReady_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmUpMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  arg2 = (Elk::ArmUpMode)jarg2; 
  if (arg1) (arg1)->isReady = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1isReady_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmUpMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  result = (Elk::ArmUpMode) ((arg1)->isReady);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1alarm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::AlarmState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  arg2 = (Elk::AlarmState)jarg2; 
  if (arg1) (arg1)->alarm = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatus_1alarm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::AlarmState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  result = (Elk::AlarmState) ((arg1)->alarm);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ArmStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::ArmStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::ArmStatus *)new Elk::ArmStatus();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::ArmStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ArmStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::ArmStatus **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1zoneIsOn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneIsOn = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1zoneIsOn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (bool) ((arg1)->zoneIsOn);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1loudness_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->loudness = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1loudness_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (bool) ((arg1)->loudness);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1doNotDisturb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doNotDisturb = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1doNotDisturb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (bool) ((arg1)->doNotDisturb);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1source_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1source_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (int) ((arg1)->source);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (int) ((arg1)->volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1bass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bass = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1bass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (int) ((arg1)->bass);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1treble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->treble = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1treble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (int) ((arg1)->treble);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (int) ((arg1)->balance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1partyMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  enum Elk::AudioData::PartyMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  arg2 = (enum Elk::AudioData::PartyMode)jarg2; 
  if (arg1) (arg1)->partyMode = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_AudioData_1partyMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  enum Elk::AudioData::PartyMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::AudioData **)&jarg1; 
  result = (enum Elk::AudioData::PartyMode) ((arg1)->partyMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1AudioData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::AudioData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::AudioData *)new Elk::AudioData();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::AudioData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1AudioData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::AudioData **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1event_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1event_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->event);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1eventSubjectNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventSubjectNumber = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1eventSubjectNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->eventSubjectNumber);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1area_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->area = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1area_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->area);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->hour);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1minute_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1minute_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->minute);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->month);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->day);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->index);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1dayOfWeek_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  Elk::Weekday arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  arg2 = (Elk::Weekday)jarg2; 
  if (arg1) (arg1)->dayOfWeek = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_LogEntry_1dayOfWeek_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  Elk::Weekday result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  result = (Elk::Weekday) ((arg1)->dayOfWeek);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1LogEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::LogEntry *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::LogEntry *)new Elk::LogEntry();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::LogEntry **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1LogEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::LogEntry **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneState_1physicalState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::PhysicalZoneState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ZoneState **)&jarg1; 
  arg2 = (Elk::PhysicalZoneState)jarg2; 
  if (arg1) (arg1)->physicalState = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ZoneState_1physicalState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::PhysicalZoneState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ZoneState **)&jarg1; 
  result = (Elk::PhysicalZoneState) ((arg1)->physicalState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ZoneState_1logicalState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::LogicalZoneState arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ZoneState **)&jarg1; 
  arg2 = (Elk::LogicalZoneState)jarg2; 
  if (arg1) (arg1)->logicalState = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ZoneState_1logicalState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::LogicalZoneState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ZoneState **)&jarg1; 
  result = (Elk::LogicalZoneState) ((arg1)->logicalState);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ZoneState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::ZoneState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::ZoneState *)new Elk::ZoneState();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::ZoneState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ZoneState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::ZoneState **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1seconds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seconds = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1seconds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->seconds);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1minutes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minutes = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1minutes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->minutes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1hours_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hours = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1hours_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->hours);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1weekday_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  Elk::Weekday arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (Elk::Weekday)jarg2; 
  if (arg1) (arg1)->weekday = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1weekday_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  Elk::Weekday result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (Elk::Weekday) ((arg1)->weekday);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->day);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->month);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (int) ((arg1)->year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1twelveHourClock_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->twelveHourClock = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1twelveHourClock_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (bool) ((arg1)->twelveHourClock);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1dayBeforeMonth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dayBeforeMonth = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_RTCData_1dayBeforeMonth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::RTCData **)&jarg1; 
  result = (bool) ((arg1)->dayBeforeMonth);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1RTCData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::RTCData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::RTCData *)new Elk::RTCData();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::RTCData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1RTCData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::RTCData **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  enum Elk::ThermostatData::ThermostatMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = (enum Elk::ThermostatData::ThermostatMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  enum Elk::ThermostatData::ThermostatMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (enum Elk::ThermostatData::ThermostatMode) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1holdCurrentTemperature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->holdCurrentTemperature = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1holdCurrentTemperature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (bool) ((arg1)->holdCurrentTemperature);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1fanOn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fanOn = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1fanOn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (bool) ((arg1)->fanOn);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1temperature_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1temperature_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (int) ((arg1)->temperature);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1heatSetPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heatSetPoint = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1heatSetPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (int) ((arg1)->heatSetPoint);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1coolSetPoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->coolSetPoint = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1coolSetPoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (int) ((arg1)->coolSetPoint);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1humidity_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->humidity = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_ThermostatData_1humidity_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  result = (int) ((arg1)->humidity);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ThermostatData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::ThermostatData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::ThermostatData *)new Elk::ThermostatData();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::ThermostatData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ThermostatData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::ThermostatData **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1ACFail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ACFail = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1ACFail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->ACFail);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1boxTamper_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->boxTamper = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1boxTamper_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->boxTamper);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1communicationError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->communicationError = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1communicationError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->communicationError);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1EEPROMError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EEPROMError = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1EEPROMError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->EEPROMError);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1lowBattery_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lowBattery = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1lowBattery_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->lowBattery);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1overCurrent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overCurrent = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1overCurrent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->overCurrent);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1telephoneFault_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->telephoneFault = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1telephoneFault_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->telephoneFault);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1output2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->output2 = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1output2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->output2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1missingKeypad_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->missingKeypad = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1missingKeypad_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->missingKeypad);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1zoneExpander_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneExpander = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1zoneExpander_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->zoneExpander);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1outputExpander_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outputExpander = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1outputExpander_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->outputExpander);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1RPRemoteAccess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RPRemoteAccess = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1RPRemoteAccess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->RPRemoteAccess);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1commonAreaNotArmed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->commonAreaNotArmed = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1commonAreaNotArmed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->commonAreaNotArmed);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1flashMemoryError_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->flashMemoryError = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1flashMemoryError_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->flashMemoryError);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1securityAlert_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->securityAlert = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1securityAlert_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->securityAlert);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1serialPortExpander_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->serialPortExpander = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1serialPortExpander_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->serialPortExpander);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1lostTransmitter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lostTransmitter = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1lostTransmitter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->lostTransmitter);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1GESmokeCleanMe_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GESmokeCleanMe = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1GESmokeCleanMe_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->GESmokeCleanMe);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1ethernet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ethernet = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_SystemTroubleStatus_1ethernet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  result = (bool) ((arg1)->ethernet);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1SystemTroubleStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::SystemTroubleStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::SystemTroubleStatus *)new Elk::SystemTroubleStatus();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::SystemTroubleStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1SystemTroubleStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::SystemTroubleStatus **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_KeypadFkeyStatus_1illumination_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::FkeyIllumination *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::KeypadFkeyStatus **)&jarg1; 
  arg2 = *(enum Elk::KeypadFkeyStatus::FkeyIllumination **)&jarg2; 
  {
    size_t ii;
    enum Elk::KeypadFkeyStatus::FkeyIllumination *b = (enum Elk::KeypadFkeyStatus::FkeyIllumination *) arg1->illumination;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((enum Elk::KeypadFkeyStatus::FkeyIllumination *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_KeypadFkeyStatus_1illumination_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::FkeyIllumination *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::KeypadFkeyStatus **)&jarg1; 
  result = (enum Elk::KeypadFkeyStatus::FkeyIllumination *)(enum Elk::KeypadFkeyStatus::FkeyIllumination *) ((arg1)->illumination);
  *(enum Elk::KeypadFkeyStatus::FkeyIllumination **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_KeypadFkeyStatus_1codeRequiredForBypass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::KeypadFkeyStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->codeRequiredForBypass = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_KeypadFkeyStatus_1codeRequiredForBypass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::KeypadFkeyStatus **)&jarg1; 
  result = (bool) ((arg1)->codeRequiredForBypass);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1KeypadFkeyStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::KeypadFkeyStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::KeypadFkeyStatus *)new Elk::KeypadFkeyStatus();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::KeypadFkeyStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1KeypadFkeyStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::KeypadFkeyStatus **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1CODETYPE_1USER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::UserCodeAccess::CodeType result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::UserCodeAccess::CodeType)Elk::UserCodeAccess::CODETYPE_USER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1codetype_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  enum Elk::UserCodeAccess::CodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  arg2 = (enum Elk::UserCodeAccess::CodeType)jarg2; 
  if (arg1) (arg1)->codetype = arg2;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1codetype_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  enum Elk::UserCodeAccess::CodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  result = (enum Elk::UserCodeAccess::CodeType) ((arg1)->codetype);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1usesCelcius_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->usesCelcius = arg2;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1usesCelcius_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  result = (bool) ((arg1)->usesCelcius);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1validAreas_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->validAreas = arg2;
}


SWIGEXPORT jshort JNICALL Java_elkm1api_ElkM1APIJNI_UserCodeAccess_1validAreas_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  result = (uint8_t) ((arg1)->validAreas);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1UserCodeAccess(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::UserCodeAccess *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::UserCodeAccess *)new Elk::UserCodeAccess();
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Elk::UserCodeAccess **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1UserCodeAccess(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::UserCodeAccess **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolCallback_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  BoolCallback *arg1 = (BoolCallback *) 0 ;
  bool arg2 ;
  std::shared_ptr< BoolCallback > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  BoolCallback > **)&jarg1;
  arg1 = (BoolCallback *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->run(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1BoolCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BoolCallback *arg1 = (BoolCallback *) 0 ;
  std::shared_ptr< BoolCallback > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  BoolCallback > **)&jarg1;
  arg1 = (BoolCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1BoolCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BoolCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (BoolCallback *)new SwigDirector_BoolCallback(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  BoolCallback > **)&jresult = result ? new std::shared_ptr<  BoolCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< BoolCallback > *obj = *((std::shared_ptr< BoolCallback > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_BoolCallback *director = dynamic_cast<SwigDirector_BoolCallback *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_BoolCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  BoolCallback *obj = *((BoolCallback **)&objarg);
  SwigDirector_BoolCallback *director = dynamic_cast<SwigDirector_BoolCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntCallback_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IntCallback *arg1 = (IntCallback *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntCallback **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1IntCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntCallback *arg1 = (IntCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IntCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1IntCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IntCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (IntCallback *)new SwigDirector_IntCallback(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(IntCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  IntCallback *obj = *((IntCallback **)&objarg);
  (void)jcls;
  SwigDirector_IntCallback *director = dynamic_cast<SwigDirector_IntCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_IntCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  IntCallback *obj = *((IntCallback **)&objarg);
  SwigDirector_IntCallback *director = dynamic_cast<SwigDirector_IntCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVectorCallback_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ArmStatusVectorCallback *arg1 = (ArmStatusVectorCallback *) 0 ;
  std::vector< Elk::ArmStatus > arg2 ;
  std::shared_ptr< ArmStatusVectorCallback > *smartarg1 = 0 ;
  std::vector< Elk::ArmStatus > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  ArmStatusVectorCallback > **)&jarg1;
  arg1 = (ArmStatusVectorCallback *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< Elk::ArmStatus > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< Elk::ArmStatus >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1ArmStatusVectorCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArmStatusVectorCallback *arg1 = (ArmStatusVectorCallback *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  ArmStatusVectorCallback > **)&jarg1;
  arg1 = (ArmStatusVectorCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1ArmStatusVectorCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArmStatusVectorCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (ArmStatusVectorCallback *)new SwigDirector_ArmStatusVectorCallback(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  ArmStatusVectorCallback > **)&jresult = result ? new std::shared_ptr<  ArmStatusVectorCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVectorCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< ArmStatusVectorCallback > *obj = *((std::shared_ptr< ArmStatusVectorCallback > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ArmStatusVectorCallback *director = dynamic_cast<SwigDirector_ArmStatusVectorCallback *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_ArmStatusVectorCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ArmStatusVectorCallback *obj = *((ArmStatusVectorCallback **)&objarg);
  SwigDirector_ArmStatusVectorCallback *director = dynamic_cast<SwigDirector_ArmStatusVectorCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1onRPConnection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolCallback > *arg2 = 0 ;
  std::shared_ptr< BoolCallback > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< BoolCallback > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->onRPConnection = *arg2;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1onRPConnection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolCallback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (std::shared_ptr< BoolCallback > *) & ((arg1)->onRPConnection);
  *(std::shared_ptr< BoolCallback > **)&jresult = *result ? new std::shared_ptr< BoolCallback >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1onArmStatusChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *arg2 = 0 ;
  std::shared_ptr< ArmStatusVectorCallback > tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = jarg2 ? *(std::shared_ptr< ArmStatusVectorCallback > **)&jarg2 : &tempnull2; 
  if (arg1) (arg1)->onArmStatusChange = *arg2;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1onArmStatusChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (std::shared_ptr< ArmStatusVectorCallback > *) & ((arg1)->onArmStatusChange);
  *(std::shared_ptr< ArmStatusVectorCallback > **)&jresult = *result ? new std::shared_ptr< ArmStatusVectorCallback >(*result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getConfiguredZones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getConfiguredZones();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getConfiguredKeypads(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getConfiguredKeypads();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getConfiguredTempDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getConfiguredTempDevices();
  *(std::vector< std::pair< int,Elk::TemperatureDevice > > **)&jresult = new std::vector< std::pair< int,Elk::TemperatureDevice > >((const std::vector< std::pair< int,Elk::TemperatureDevice > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1armDisarm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::ArmMode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ArmMode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->armDisarm(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getArmStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::ArmStatus > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getArmStatus();
  *(std::vector< Elk::ArmStatus > **)&jresult = new std::vector< Elk::ArmStatus >((const std::vector< Elk::ArmStatus > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getZoneAlarms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::SZoneDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getZoneAlarms();
  *(std::vector< Elk::SZoneDefinition > **)&jresult = new std::vector< Elk::SZoneDefinition >((const std::vector< Elk::SZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getAudioData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::AudioData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getAudioData(arg2);
  *(Elk::AudioData **)&jresult = new Elk::AudioData((const Elk::AudioData &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1enableControlOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->enableControlOutput(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1disableControlOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->disableControlOutput(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1toggleControlOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->toggleControlOutput(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getControlOutputs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< bool > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getControlOutputs();
  *(std::vector< bool > **)&jresult = new std::vector< bool >((const std::vector< bool > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getCustomValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCustomValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getCustomValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< uint16_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getCustomValues();
  *(std::vector< uint16_t > **)&jresult = new std::vector< uint16_t >((const std::vector< uint16_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setCustomValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->setCustomValue(arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1requestChangeUserCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jshort jarg5) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  uint8_t arg5 ;
  Elk::UserCodeSuccess result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (uint8_t)jarg5; 
  result = (Elk::UserCodeSuccess)(arg1)->requestChangeUserCode(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getCounterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCounterValue(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setCounterValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint16_t)(arg1)->setCounterValue(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1displayLCDText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4, jint jarg5, jstring jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1displayLCDText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getLightingStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getLightingStatus(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getKeypadAreas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getKeypadAreas();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getKeypadFkeyStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::KeypadFkeyStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getKeypadFkeyStatus(arg2);
  *(Elk::KeypadFkeyStatus **)&jresult = new Elk::KeypadFkeyStatus((const Elk::KeypadFkeyStatus &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1pressFunctionKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::FKEY arg3 ;
  std::vector< Elk::SChimeMode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::FKEY)jarg3; 
  result = (arg1)->pressFunctionKey(arg2,arg3);
  *(std::vector< Elk::SChimeMode > **)&jresult = new std::vector< Elk::SChimeMode >((const std::vector< Elk::SChimeMode > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getLogData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::LogEntry result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getLogData(arg2);
  *(Elk::LogEntry **)&jresult = new Elk::LogEntry((const Elk::LogEntry &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getLogs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::LogEntry > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getLogs();
  *(std::vector< Elk::LogEntry > **)&jresult = new std::vector< Elk::LogEntry >((const std::vector< Elk::LogEntry > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setLogData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLogData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1executePLCCommand(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->executePLCCommand(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setPLCState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jint jarg3, jboolean jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setPLCState(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1togglePLCState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2, jint jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->togglePLCState(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getPLCStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getPLCStatus(arg2);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getRTCData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::RTCData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getRTCData();
  *(Elk::RTCData **)&jresult = new Elk::RTCData((const Elk::RTCData &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setRTCData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::RTCData arg2 ;
  Elk::RTCData *argp2 ;
  Elk::RTCData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::M1API **)&jarg1; 
  argp2 = *(Elk::RTCData **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Elk::RTCData");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->setRTCData(arg2);
  *(Elk::RTCData **)&jresult = new Elk::RTCData((const Elk::RTCData &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getTextDescription(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jstring jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TextDescriptionType arg2 ;
  int arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (Elk::TextDescriptionType)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->getTextDescription(arg2,arg3);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getSystemTroubleStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SystemTroubleStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getSystemTroubleStatus();
  *(Elk::SystemTroubleStatus **)&jresult = new Elk::SystemTroubleStatus((const Elk::SystemTroubleStatus &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TemperatureDevice arg2 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTemperature(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getTemperatures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TemperatureDevice arg2 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  result = (arg1)->getTemperatures(arg2);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1speakWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenWord arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (Elk::SirenWord)jarg2; 
  (arg1)->speakWord(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1speakPhrase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenPhrase arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (Elk::SirenPhrase)jarg2; 
  (arg1)->speakPhrase(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getOmnistat2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::M1API **)&jarg1; 
  argp2 = *(std::vector< char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< char >");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->getOmnistat2Data(arg2);
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1activateTask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->activateTask(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getThermostatData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::ThermostatData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getThermostatData(arg2);
  *(Elk::ThermostatData **)&jresult = new Elk::ThermostatData((const Elk::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setThermostatData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Elk::ThermostatData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->setThermostatData(arg2,arg3,arg4);
  *(Elk::ThermostatData **)&jresult = new Elk::ThermostatData((const Elk::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getUserCodeAccess(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::string arg2 ;
  Elk::UserCodeAccess result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getUserCodeAccess(arg2);
  *(Elk::UserCodeAccess **)&jresult = new Elk::UserCodeAccess((const Elk::UserCodeAccess &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getM1VersionNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getM1VersionNumber();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1zoneBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (bool)(arg1)->zoneBypass(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1setAreaBypass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setAreaBypass(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getZoneDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::SZoneDefinition > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getZoneDefinitions();
  *(std::vector< Elk::SZoneDefinition > **)&jresult = new std::vector< Elk::SZoneDefinition >((const std::vector< Elk::SZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getZonePartitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getZonePartitions();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getZoneStatuses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::ZoneState > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  result = (arg1)->getZoneStatuses();
  *(std::vector< Elk::ZoneState > **)&jresult = new std::vector< Elk::ZoneState >((const std::vector< Elk::ZoneState > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_elkm1api_ElkM1APIJNI_M1API_1getZoneVoltage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1API **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getZoneVoltage(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1M1API(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::M1API **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1M1Monitor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::M1Monitor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Monitor_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1Monitor **)&jarg1; 
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Monitor_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1Monitor **)&jarg1; 
  (arg1)->stop();
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1M1AsciiAPI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::shared_ptr< Elk::M1Connection > arg1 ;
  std::shared_ptr< Elk::M1Connection > *argp1 ;
  Elk::M1AsciiAPI *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(std::shared_ptr< Elk::M1Connection > **)&jarg1; 
  if (argp1) arg1 = *argp1; 
  result = (Elk::M1AsciiAPI *)new Elk::M1AsciiAPI(arg1);
  *(Elk::M1AsciiAPI **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1AsciiAPI_1collectNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  Elk::TextDescriptionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1AsciiAPI **)&jarg1; 
  arg2 = (Elk::TextDescriptionType)jarg2; 
  (arg1)->collectNames(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1AsciiAPI_1getConfiguredAreas(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1AsciiAPI **)&jarg1; 
  result = (arg1)->getConfiguredAreas();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1AsciiAPI_1displayLCDText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4, jint jarg5, jstring jarg6) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1AsciiAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1AsciiAPI_1displayLCDText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jboolean jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::M1AsciiAPI **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if(!jarg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg6_pstr = (const char *)jenv->GetStringUTFChars(jarg6, 0); 
  if (!arg6_pstr) return ;
  (&arg6)->assign(arg6_pstr);
  jenv->ReleaseStringUTFChars(jarg6, arg6_pstr); 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1M1AsciiAPI(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::M1AsciiAPI **)&jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1M1Connection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Connect(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1Disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Disconnect();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1Send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::vector< char > arg2 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< char >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Send(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1Recieve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->Recieve();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1M1Connection(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Elk::M1Connection *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Elk::M1Connection *)new SwigDirector_M1Connection(jenv);
    } catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  *(std::shared_ptr<  Elk::M1Connection > **)&jresult = result ? new std::shared_ptr<  Elk::M1Connection >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  std::shared_ptr< Elk::M1Connection > *obj = *((std::shared_ptr< Elk::M1Connection > **)&objarg);
  (void)jcls;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_M1Connection *director = dynamic_cast<SwigDirector_M1Connection *>(obj->operator->());
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_M1Connection_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Elk::M1Connection *obj = *((Elk::M1Connection **)&objarg);
  SwigDirector_M1Connection *director = dynamic_cast<SwigDirector_M1Connection *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM9_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CUSTOM10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CUSTOM10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ZERO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ZERO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TWO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TWO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THREE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THREE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOUR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOUR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SIX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SIX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SEVEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SEVEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ELEVEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ELEVEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TWELVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TWELVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THIRTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THIRTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOURTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOURTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FIFTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FIFTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SIXTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SIXTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SEVENTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SEVENTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EIGHTEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EIGHTEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NINETEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NINETEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TWENTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TWENTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THIRTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THIRTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOURTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOURTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FIFTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FIFTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SIXTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SIXTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SEVENTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SEVENTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EIGHTY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EIGHTY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NINETY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NINETY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HUNDRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HUNDRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THOUSAND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THOUSAND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1200MS_1SILENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_200MS_SILENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1500MS_1SILENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_500MS_SILENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1800HZ_1TONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_800HZ_TONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1A_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_A;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ACCESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ACCESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ACKNOWLEDGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ACKNOWLEDGED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AC_1POWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AC_POWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ACTIVATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ACTIVATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ACTIVATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ACTIVATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ADJUST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ADJUST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AIR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AIR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ALARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ALARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ALERT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ALERT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ANSWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ANSWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ANY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ANY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ARE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ARE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AREA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AREA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ATTIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ATTIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUTO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUTO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUTHORIZED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUTHORIZED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUTOMATIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUTOMATIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUTOMATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUTOMATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AUXILIARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AUXILIARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1AWAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_AWAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1B_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_B;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BARN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BARN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BASEMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BASEMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BATHROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BATHROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BATTERY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BATTERY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BEDROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BEDROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BEEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BEEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BELL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BELL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BOTTOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BOTTOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BREAK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BREAK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BREAKFAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BREAKFAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BRIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BRIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BUILDING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BUILDING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BURGLAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BURGLAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BUTTON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BUTTON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1BYPASSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_BYPASSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CABINET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CABINET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CAMERA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CAMERA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CANCEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CANCEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CARBON_1MONOXIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CARBON_MONOXIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CENTRAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CENTRAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CHECK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CHECK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CHIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CHIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CIRCUIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CIRCUIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CLEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CLEAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CLOSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CLOSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CLOSET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CLOSET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1COLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_COLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CONDITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CONDITION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1COOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_COOL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1COOLING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_COOLING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CORNER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CORNER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1CRAWLSPACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_CRAWLSPACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DANGER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DANGER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DECK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DECK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DECREASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DECREASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DEFECTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DEFECTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DEGREES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DEGREES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DENIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DENIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DETECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DETECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DETECTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DETECTOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DEVICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DEVICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DIAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DIALING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DIALING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DIM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DIM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DINING_1ROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DINING_ROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DISABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DISABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DISARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DISARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DOOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DOOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DOORS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DOORS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1DRIVEWAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_DRIVEWAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EAST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EAST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EMERGENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EMERGENCY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENABLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENABLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1END_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_END;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENERGY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENERGY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENROLLMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENROLLMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENTERING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENTERING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENTERTAINMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENTERTAINMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENTER_1THE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENTER_THE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENTRY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENTRY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ENVIRONMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ENVIRONMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EQUIPMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EQUIPMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EVACUATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EVACUATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EVENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EVENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EXERCISE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EXERCISE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EXPANDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EXPANDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EXIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EXIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1EXTERIOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_EXTERIOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1F_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_F;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FAILURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FAILURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FAMILY_1ROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FAMILY_ROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FAN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FAN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FEED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FEED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FIRST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FIRST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FLOOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FLOOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FLOOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FLOOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOLLOWED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOLLOWED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FORCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FORCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOUNTAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOUNTAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FOYER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FOYER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FREEZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FREEZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FRONT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FRONT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FULL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FULL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FURNACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FURNACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1FUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_FUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GAME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GAME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GARAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GARAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GATE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GATE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GLASS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GLASS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GOOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GOOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GOODBYE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GOODBYE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GREAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GREAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GROUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GROUP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GUEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GUEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1GUN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_GUN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HALLWAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HALLWAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HANGING_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HANGING_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HANG_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HANG_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HAS_1EXPIRED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HAS_EXPIRED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HAVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HAVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HEAR_1MENU_1OPTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HEAR_MENU_OPTIONS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HEAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HELP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HELP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HIGH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HOLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HOLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HOME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HOME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HOT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HOTTUB_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HOTTUB;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HOUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HOUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HUMIDITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HUMIDITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1HVAC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_HVAC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IMMEDIATELY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IMMEDIATELY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INCHES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INCHES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INCREASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INCREASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INNER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INNER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INSIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INSIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INSTANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INTERIOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INTERIOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IN_1THE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IN_THE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INTRUDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INTRUDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INTRUSION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INTRUSION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1ABOUT_1TO_1EXPIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_ABOUT_TO_EXPIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1ACTIVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_ACTIVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1CANCELED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_CANCELED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1CLOSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_CLOSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1IS_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_IS_OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1JACUZZI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_JACUZZI;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1JEWELRY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_JEWELRY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1KEEP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_KEEP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1KEY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_KEY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1KEYPAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_KEYPAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1KITCHEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_KITCHEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LAMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LAMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LAUNDRY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LAUNDRY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LAWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LAWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LEAK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LEAK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LEAVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LEAVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LEFT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LEVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LEVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LIBRARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LIBRARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LIGHTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LIGHTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LIVING_1ROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LIVING_ROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOADING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOADING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOBBY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOBBY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOCATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOCATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1LOWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_LOWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1M_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_M;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MACHINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MACHINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MAIN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MAIN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MAINS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MAINS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MANUAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MANUAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MASTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MASTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MAX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MEDIA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MEDIA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MEDICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MEDICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MEDICINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MEDICINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MENU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MENU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MESSAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MESSAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MIDDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MIDDLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MINUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MINUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MODULE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MODULE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MONITOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MONITOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MORE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MORE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MOTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MOTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1MOTOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_MOTOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NEXT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NEXT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NORTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NORTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NOT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NOT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NOTIFIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NOTIFIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1NURSERY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_NURSERY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OFFICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OFFICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ONLINE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ONLINE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OPERATING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OPERATING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OPTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OPTION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OTHER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OUTLET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OUTLET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OUTPUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OUTPUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OUTSIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OUTSIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1OVERHEAD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_OVERHEAD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PANEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PANEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PANIC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PANIC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PARKING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PARKING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PARTITION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PARTITION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PATIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PATIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PAUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PAUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PERIMETER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PERIMETER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PERSONAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PERSONAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PHONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PHONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PLACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PLACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PLAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PLAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PLEASE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PLEASE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PLUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PLUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1POLICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_POLICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1POOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_POOL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PORCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PORCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1POUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_POUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1POUNDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_POUNDS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1POWER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_POWER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PRESS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PRESS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PRESSURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PRESSURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PROBLEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PROBLEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PROGRAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PROGRAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PROTECTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PROTECTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1PUMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_PUMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RADIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RADIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RAISE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RAISE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1READY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_READY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RECEIVER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RECEIVER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RECORD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RECORD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RECREATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RECREATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REMAIN_1CALM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REMAIN_CALM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REMOTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REMOTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REPEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REPEAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REPORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REPORT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1REPORTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_REPORTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RESET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RESET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RESTORED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RESTORED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RETURN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RIGHT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ROOF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ROOF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ROOM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ROOM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1RUNNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_RUNNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SAFE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SAFE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SAVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SAVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SCREEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SCREEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SECOND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SECOND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SECURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SECURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SECURITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SECURITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SELECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SELECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SENSOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SENSOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SERIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SERIAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SERVICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SERVICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SETBACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SETBACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SETPOINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SETPOINT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SETTING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SETTING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHIPPING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHIPPING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SHUNTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SHUNTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SILENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SILENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SIREN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SIREN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SLIDING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SLIDING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SMOKE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SMOKE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SOMEONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SOMEONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SOUTH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SOUTH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SPARE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SPARE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SPEAKER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SPEAKER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SPRINKLER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SPRINKLER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STAIRS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STAIRS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STAIRWAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STAIRWAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1START_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_START;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STATUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STOCK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STOCK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STORAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STORAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STORM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STORM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STUDIO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STUDIO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1STUDY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_STUDY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SUMP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SUMP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SUN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SUN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SWITCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SWITCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1SYSTEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_SYSTEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TAMPER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TAMPER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TANK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TANK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TASK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TELEPHONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TELEPHONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TELEVISION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TELEVISION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TEMPERATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TEMPERATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THANK_1YOU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THANK_YOU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THEATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THEATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THERMOSTAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THERMOSTAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1THIRD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_THIRD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TOGGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TOGGLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TOP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TRANSFORMER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TRANSFORMER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TRANSMITTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TRANSMITTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TRESPASSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TRESPASSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TROUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TROUBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TURN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TURN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TWICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TWICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1TYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_TYPE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UNDER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UNDER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UNIT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UNIT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UNLOCKED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UNLOCKED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UNOCCUPIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UNOCCUPIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1USER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_USER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1UTILITY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_UTILITY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1VACATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_VACATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1VALVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_VALVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1VIDEO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_VIDEO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1VIOLATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_VIOLATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1VISITOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_VISITOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WAKE_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WAKE_UP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WALK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WALK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WALL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WALL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WAREHOUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WAREHOUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WARNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WELCOME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WELCOME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WEST_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WEST;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WHAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WHAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WHEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WHEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WHERE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WHERE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WILL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WILL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WINDOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WINDOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WINDOWS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WINDOWS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WITH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WITH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1WORK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_WORK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1YARD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_YARD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1YEAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_YEAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1YOU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_YOU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ZONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ZONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1ZONES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_ZONES;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENWORD_1INTRUDER_1MESSAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenWord result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenWord)Elk::SIRENWORD_INTRUDER_MESSAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SILENCEDELAY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SILENCEDELAY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_17_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_18_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_19_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_110_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_111_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_11;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_112_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_12;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_113_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_13;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_114_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_14;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_115_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_15;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_116_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_16;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_117_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_17;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_118_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_18;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_119_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_19;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_120_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_20;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_121_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_21;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_122_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_22;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_123_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_23;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_124_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_24;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_125_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_25;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_126_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_26;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_127_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_27;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_128_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_28;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_129_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_29;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_130_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_30;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_131_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_31;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_132_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_32;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_133_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_33;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_134_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_34;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_135_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_35;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_136_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_36;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_137_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_37;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_138_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_38;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_139_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_39;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_140_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_40;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_141_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_41;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_142_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_42;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_143_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_43;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_144_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_44;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_145_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_45;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_146_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_46;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_147_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_47;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_148_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_48;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_149_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_49;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_150_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_50;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_151_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_51;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_152_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_52;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_153_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_53;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_154_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_54;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_155_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_55;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_156_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_56;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_157_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_57;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_158_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_58;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_159_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_59;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_160_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_60;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_161_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_61;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_162_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_62;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_163_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_63;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_164_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_165_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_65;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_166_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_66;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_167_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_67;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_168_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_68;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_169_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_69;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_170_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_70;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_171_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_71;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_172_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_72;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_173_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_73;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_174_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_74;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_175_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_75;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_176_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_76;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_177_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_77;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_178_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_78;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_179_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_79;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_180_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_80;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_181_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_81;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_182_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_82;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_183_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_83;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_184_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_84;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_185_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_85;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_186_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_86;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_187_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_87;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_188_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_88;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_189_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_89;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_190_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_90;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_191_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_91;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_192_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_92;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_193_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_93;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_194_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_94;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_195_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_95;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_196_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_96;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_197_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_97;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_198_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_98;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_199_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_99;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1100_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_100;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1101_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_101;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1102_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_102;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1103_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_103;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1104_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_104;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1105_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_105;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1106_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_106;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1107_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_107;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1108_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_108;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1109_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_109;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1110_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_110;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1111_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_111;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1112_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_112;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1113_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_113;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1114_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_114;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1115_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_115;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1116_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_116;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1117_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_117;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1118_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_118;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1119_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_119;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1120_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_120;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1121_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_121;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1122_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_122;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1123_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_123;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1124_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_124;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1125_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_125;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1126_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_126;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1127_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_127;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1128_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_128;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1129_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_129;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1130_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_130;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1131_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_131;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1132_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_132;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1133_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_133;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1134_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_134;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1135_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_135;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1136_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_136;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1137_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_137;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1138_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_138;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1139_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_139;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1140_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_140;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1141_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_141;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1142_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_142;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1143_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_143;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1144_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_144;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1145_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_145;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1146_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_146;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1147_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_147;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1148_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_148;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1149_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_149;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1150_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_150;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1151_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_151;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1152_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_152;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1153_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_153;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1154_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_154;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1155_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_155;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1156_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_156;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1157_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_157;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1158_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_158;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1159_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_159;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1160_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_160;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1161_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_161;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1162_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_162;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1163_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_163;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1164_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_164;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1165_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_165;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1166_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_166;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1167_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_167;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1168_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_168;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1169_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_169;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1170_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_170;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1171_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_171;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1172_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_172;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1173_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_173;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1174_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_174;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1175_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_175;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1176_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_176;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1177_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_177;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1178_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_178;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1179_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_179;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1180_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_180;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1181_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_181;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1182_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_182;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1183_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_183;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1184_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_184;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1185_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_185;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1186_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_186;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1187_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_187;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1188_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_188;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1189_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_189;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1190_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_190;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1191_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_191;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1192_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_192;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1193_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_193;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1194_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_194;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1195_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_195;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1196_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_196;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1197_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_197;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1198_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_198;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1199_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_199;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1200_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_200;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1201_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_201;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1202_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_202;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1203_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_203;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1204_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_204;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1205_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_205;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1206_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_206;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1207_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_207;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ZONE_1208_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ZONE_208;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1KEYPAD_1PANIC_1ALARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_KEYPAD_PANIC_ALARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AC_1POWER_1FAILURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AC_POWER_FAILURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TELEPHONE_1LINE_1TROUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TELEPHONE_LINE_TROUBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ALARM_1SILENCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ALARM_SILENCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ALARM_1ACKNOWLEDGED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ALARM_ACKNOWLEDGED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1AWAY_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_AWAY_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1STAY_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_STAY_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1STAY_1INSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_STAY_INSTANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1NIGHT_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_NIGHT_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1NIGHT_1INSTANT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_NIGHT_INSTANT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1ARMED_1VACATION_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_ARMED_VACATION_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1EXIT_1DELAY_1IS_1ABOUT_1TO_1EXPIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_EXIT_DELAY_IS_ABOUT_TO_EXPIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTO_1ARM_1IN_11_1MINUTE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTO_ARM_IN_1_MINUTE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1EXIT_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_EXIT_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1CLOSING_1RING_1BACK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_CLOSING_RING_BACK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUDIO_1MODULE_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUDIO_MODULE_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SYSTEM_1IS_1ARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SYSTEM_IS_ARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AREA_1X_1IS_1DISARMED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AREA_X_IS_DISARMED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1INPUT_1EXPANDER_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_INPUT_EXPANDER_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1KEYPAD_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_KEYPAD_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1NO_1ZONES_1VIOLATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_NO_ZONES_VIOLATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1OUTPUT_1EXPANDER_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_OUTPUT_EXPANDER_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1WELCOME_1SYSTEM_1IS_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_WELCOME_SYSTEM_IS_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1START_1MODULE_1ENROLLMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_START_MODULE_ENROLLMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1STOP_1MODULE_1ENROLLMENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_STOP_MODULE_ENROLLMENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SYSTEM_1BATTERY_1IS_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SYSTEM_BATTERY_IS_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PRESS_1TRANSMITTER_1BUTTON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PRESS_TRANSMITTER_BUTTON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1RECEIVER_1PROGRAM_1INVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_RECEIVER_PROGRAM_INVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TEST_1VOLUME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TEST_VOLUME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1TIME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_TIME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_17_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_18_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_19_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_9;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MISCELLANEOUS_110_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MISCELLANEOUS_10;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ENTER_1PASS_1CODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ENTER_PASS_CODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ACCESS_1ALLOWED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ACCESS_ALLOWED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SYSTEM_1NOT_1READY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SYSTEM_NOT_READY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1TASK_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_TASK_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1LIGHT_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_LIGHT_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1OUTPUT_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_OUTPUT_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1TEMPERATURE_1SENSOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_TEMPERATURE_SENSOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1KEYPAD_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_KEYPAD_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SELECT_1THERMOSTAT_1NUMBER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SELECT_THERMOSTAT_NUMBER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PRESS_1TO_1CHANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PRESS_TO_CHANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PRESS_1TO_1END_1MESSAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PRESS_TO_END_MESSAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_10_1HEAR_1MENU_1OPTIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_0_HEAR_MENU_OPTIONS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_11_1ARMDISARM_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_1_ARMDISARM_STATUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_12_1AUTOMATION_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_2_AUTOMATION_CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_11_1AUTOMATION_1TASK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_1_AUTOMATION_TASK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_12_1LIGHTING_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_2_LIGHTING_CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_13_1OUTPUT_1CONTROL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_3_OUTPUT_CONTROL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_14_1TEMPERATURE_1SENSOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_4_TEMPERATURE_SENSOR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_15_1KEYPAD_1TEMPERATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_5_KEYPAD_TEMPERATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTOMATION_1MENU_16_1THERMOSTAT_1TEMPERATURE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTOMATION_MENU_6_THERMOSTAT_TEMPERATURE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_13_1SYSTEM_1SUMMARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_3_SYSTEM_SUMMARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_14_1ZONE_1STATUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_4_ZONE_STATUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_17_1PAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_7_PAGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_18_1ADJUST_1VOLUME_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_8_ADJUST_VOLUME;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1MENU_19_1EXIT_1AND_1HANGUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_MENU_9_EXIT_AND_HANGUP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARMING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARMING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1DISARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_DISARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1HANGUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_HANGUP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TO_1TURN_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TO_TURN_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TO_1TURN_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TO_TURN_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_11_1AWAY_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_1_AWAY_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_12_1STAY_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_2_STAY_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_13_1STAY_1INSTANT_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_3_STAY_INSTANT_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_14_1NIGHT_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_4_NIGHT_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_15_1NIGHT_1INSTANT_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_5_NIGHT_INSTANT_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1PHONE_1ARM_1LEVEL_16_1VACATION_1MODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_PHONE_ARM_LEVEL_6_VACATION_MODE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1FIRE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_FIRE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1MEDICAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_MEDICAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1POLICE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_POLICE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1EMERGENCY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_EMERGENCY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1BURGLARY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_BURGLARY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1CARBON_1MONOXIDE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_CARBON_MONOXIDE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1FREEZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_FREEZE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1GAS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_GAS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1HEAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_HEAT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1WATER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_WATER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUXILIARY_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUXILIARY_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUXILIARY_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUXILIARY_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1KEY_1SWITCH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_KEY_SWITCH;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1FIRE_1MESSAGE_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_FIRE_MESSAGE_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1FIRE_1MESSAGE2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_FIRE_MESSAGE2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1BURGLARY_1MESSAGE_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_BURGLARY_MESSAGE_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1BURGLARY_1MESSAGE_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_BURGLARY_MESSAGE_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ALARM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ALARM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ALARM_1MEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ALARM_MEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1BYPASSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_BYPASSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1AUTO_1BYPASSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_AUTO_BYPASSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TRANSMITTER_1LOW_1BATTERY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TRANSMITTER_LOW_BATTERY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1TROUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_TROUBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1VIOLATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_VIOLATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1NORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_NORMAL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1ON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_ON;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1OFF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_OFF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_13_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_14_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_15_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_16_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_17_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_SIRENPHRASE_1SAY_1NAME_1OF_1AREA_18_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::SirenPhrase result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::SirenPhrase)Elk::SIRENPHRASE_SAY_NAME_OF_AREA_8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_NETWORKTYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::NetworkType result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::NetworkType)Elk::NETWORKTYPE_NONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_NETWORKTYPE_1ETHERNET_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::NetworkType result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::NetworkType)Elk::NETWORKTYPE_ETHERNET;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_NETWORKTYPE_1CELLULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Elk::NetworkType result;
  
  (void)jenv;
  (void)jcls;
  result = (Elk::NetworkType)Elk::NETWORKTYPE_CELLULAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_new_1C1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  Elk::C1M1Tunnel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Elk::M1Connection > **)&jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Elk::C1M1Tunnel *)new SwigDirector_C1M1Tunnel(jenv,arg1);
  *(Elk::C1M1Tunnel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_delete_1C1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1Authenticate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  Elk::NetworkType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  result = (Elk::NetworkType)(arg1)->Authenticate(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Connect(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1ConnectSwigExplicitC1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Elk::C1M1Tunnel::Connect(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1Disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1DisconnectSwigExplicitC1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  (arg1)->Elk::C1M1Tunnel::Disconnect();
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1Send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  argp2 = *(std::vector< char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< char >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Send(arg2);
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1SendSwigExplicitC1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  argp2 = *(std::vector< char > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< char >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Elk::C1M1Tunnel::Send(arg2);
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1Recieve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  result = (arg1)->Recieve();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1RecieveSwigExplicitC1M1Tunnel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Elk::C1M1Tunnel **)&jarg1; 
  result = (arg1)->Elk::C1M1Tunnel::Recieve();
  *(std::vector< char > **)&jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  Elk::C1M1Tunnel *obj = *((Elk::C1M1Tunnel **)&objarg);
  (void)jcls;
  SwigDirector_C1M1Tunnel *director = dynamic_cast<SwigDirector_C1M1Tunnel *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_C1M1Tunnel_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  Elk::C1M1Tunnel *obj = *((Elk::C1M1Tunnel **)&objarg);
  SwigDirector_C1M1Tunnel *director = dynamic_cast<SwigDirector_C1M1Tunnel *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1Monitor_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Elk::M1API **)&baseptr = *(Elk::M1Monitor **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_elkm1api_ElkM1APIJNI_M1AsciiAPI_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Elk::M1Monitor **)&baseptr = *(Elk::M1AsciiAPI **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_elkm1api_ElkM1APIJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[11] = {
    {
      "SwigDirector_BoolCallback_run", "(Lelkm1api/BoolCallback;Z)V" 
    },
    {
      "SwigDirector_IntCallback_run", "(Lelkm1api/IntCallback;I)V" 
    },
    {
      "SwigDirector_ArmStatusVectorCallback_run", "(Lelkm1api/ArmStatusVectorCallback;J)V" 
    },
    {
      "SwigDirector_M1Connection_Connect", "(Lelkm1api/M1Connection;Ljava/lang/String;I)Z" 
    },
    {
      "SwigDirector_M1Connection_Disconnect", "(Lelkm1api/M1Connection;)V" 
    },
    {
      "SwigDirector_M1Connection_Send", "(Lelkm1api/M1Connection;J)V" 
    },
    {
      "SwigDirector_M1Connection_Recieve", "(Lelkm1api/M1Connection;)J" 
    },
    {
      "SwigDirector_C1M1Tunnel_Connect", "(Lelkm1api/C1M1Tunnel;Ljava/lang/String;I)Z" 
    },
    {
      "SwigDirector_C1M1Tunnel_Disconnect", "(Lelkm1api/C1M1Tunnel;)V" 
    },
    {
      "SwigDirector_C1M1Tunnel_Send", "(Lelkm1api/C1M1Tunnel;J)V" 
    },
    {
      "SwigDirector_C1M1Tunnel_Recieve", "(Lelkm1api/C1M1Tunnel;)J" 
    }
  };
  Swig::jclass_ElkM1APIJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_ElkM1APIJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

