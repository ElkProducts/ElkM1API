/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_ElkM1API_WRAP_H_
#define SWIG_ElkM1API_WRAP_H_

class SwigDirector_BoolCallback : public BoolCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_BoolCallback(JNIEnv *jenv);
    virtual void run(bool arg1);
    virtual ~SwigDirector_BoolCallback();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_IntCallback : public IntCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_IntCallback(JNIEnv *jenv);
    virtual void run(int arg1);
    virtual ~SwigDirector_IntCallback();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_ArmStatusVectorCallback : public ArmStatusVectorCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ArmStatusVectorCallback(JNIEnv *jenv);
    virtual void run(std::vector< Elk::ArmStatus > status);
    virtual ~SwigDirector_ArmStatusVectorCallback();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_M1Connection : public Elk::M1Connection, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_M1Connection(JNIEnv *jenv);
    virtual ~SwigDirector_M1Connection();
    virtual bool Connect(std::string location, int port);
    virtual void Disconnect();
    virtual void Send(std::vector< char > data);
    virtual std::vector< char > Recieve();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_C1M1Tunnel : public Elk::C1M1Tunnel, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_C1M1Tunnel(JNIEnv *jenv, Elk::M1Connection *underlying);
    virtual ~SwigDirector_C1M1Tunnel();
    virtual bool Connect(std::string location, int port);
    virtual void Disconnect();
    virtual void Send(std::vector< char > data);
    virtual std::vector< char > Recieve();
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};


#endif
