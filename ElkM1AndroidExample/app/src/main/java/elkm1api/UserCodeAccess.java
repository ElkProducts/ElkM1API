/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package elkm1api;

public class UserCodeAccess {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected UserCodeAccess(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(UserCodeAccess obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ElkM1APIJNI.delete_UserCodeAccess(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setCodetype(UserCodeAccess.CodeType value) {
    ElkM1APIJNI.UserCodeAccess_codetype_set(swigCPtr, this, value.swigValue());
  }

  public UserCodeAccess.CodeType getCodetype() {
    return UserCodeAccess.CodeType.swigToEnum(ElkM1APIJNI.UserCodeAccess_codetype_get(swigCPtr, this));
  }

  public void setUsesCelcius(boolean value) {
    ElkM1APIJNI.UserCodeAccess_usesCelcius_set(swigCPtr, this, value);
  }

  public boolean getUsesCelcius() {
    return ElkM1APIJNI.UserCodeAccess_usesCelcius_get(swigCPtr, this);
  }

  public void setValidAreas(short value) {
    ElkM1APIJNI.UserCodeAccess_validAreas_set(swigCPtr, this, value);
  }

  public short getValidAreas() {
    return ElkM1APIJNI.UserCodeAccess_validAreas_get(swigCPtr, this);
  }

  public UserCodeAccess() {
    this(ElkM1APIJNI.new_UserCodeAccess(), true);
  }

  public final static class CodeType {
    public final static UserCodeAccess.CodeType CODETYPE_USER = new UserCodeAccess.CodeType("CODETYPE_USER", ElkM1APIJNI.UserCodeAccess_CODETYPE_USER_get());
    public final static UserCodeAccess.CodeType CODETYPE_MASTER = new UserCodeAccess.CodeType("CODETYPE_MASTER");
    public final static UserCodeAccess.CodeType CODETYPE_INSTALLER = new UserCodeAccess.CodeType("CODETYPE_INSTALLER");
    public final static UserCodeAccess.CodeType CODETYPE_ELKRP = new UserCodeAccess.CodeType("CODETYPE_ELKRP");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static CodeType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + CodeType.class + " with value " + swigValue);
    }

    private CodeType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private CodeType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private CodeType(String swigName, CodeType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static CodeType[] swigValues = { CODETYPE_USER, CODETYPE_MASTER, CODETYPE_INSTALLER, CODETYPE_ELKRP };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
