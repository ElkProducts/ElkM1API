/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package elkm1api;

public class KeypadFkeyStatus {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected KeypadFkeyStatus(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(KeypadFkeyStatus obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ElkM1APIJNI.delete_KeypadFkeyStatus(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setIllumination(SWIGTYPE_p_Elk__KeypadFkeyStatus__FkeyIllumination value) {
    ElkM1APIJNI.KeypadFkeyStatus_illumination_set(swigCPtr, this, SWIGTYPE_p_Elk__KeypadFkeyStatus__FkeyIllumination.getCPtr(value));
  }

  public SWIGTYPE_p_Elk__KeypadFkeyStatus__FkeyIllumination getIllumination() {
    long cPtr = ElkM1APIJNI.KeypadFkeyStatus_illumination_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Elk__KeypadFkeyStatus__FkeyIllumination(cPtr, false);
  }

  public void setCodeRequiredForBypass(boolean value) {
    ElkM1APIJNI.KeypadFkeyStatus_codeRequiredForBypass_set(swigCPtr, this, value);
  }

  public boolean getCodeRequiredForBypass() {
    return ElkM1APIJNI.KeypadFkeyStatus_codeRequiredForBypass_get(swigCPtr, this);
  }

  public KeypadFkeyStatus() {
    this(ElkM1APIJNI.new_KeypadFkeyStatus(), true);
  }

  public final static class FkeyIllumination {
    public final static KeypadFkeyStatus.FkeyIllumination FKEY_OFF = new KeypadFkeyStatus.FkeyIllumination("FKEY_OFF");
    public final static KeypadFkeyStatus.FkeyIllumination FKEY_ON = new KeypadFkeyStatus.FkeyIllumination("FKEY_ON");
    public final static KeypadFkeyStatus.FkeyIllumination FKEY_BLINKING = new KeypadFkeyStatus.FkeyIllumination("FKEY_BLINKING");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static FkeyIllumination swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + FkeyIllumination.class + " with value " + swigValue);
    }

    private FkeyIllumination(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private FkeyIllumination(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private FkeyIllumination(String swigName, FkeyIllumination swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static FkeyIllumination[] swigValues = { FKEY_OFF, FKEY_ON, FKEY_BLINKING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
