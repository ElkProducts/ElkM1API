/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package elkm1api;

public class M1API {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected M1API(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(M1API obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ElkM1APIJNI.delete_M1API(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setOnRPConnection(BoolCallback value) {
    ElkM1APIJNI.M1API_onRPConnection_set(swigCPtr, this, BoolCallback.getCPtr(value), value);
  }

  public BoolCallback getOnRPConnection() {
    long cPtr = ElkM1APIJNI.M1API_onRPConnection_get(swigCPtr, this);
    return (cPtr == 0) ? null : new BoolCallback(cPtr, true);
  }

  public void setOnArmStatusChange(ArmStatusVectorCallback value) {
    ElkM1APIJNI.M1API_onArmStatusChange_set(swigCPtr, this, ArmStatusVectorCallback.getCPtr(value), value);
  }

  public ArmStatusVectorCallback getOnArmStatusChange() {
    long cPtr = ElkM1APIJNI.M1API_onArmStatusChange_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ArmStatusVectorCallback(cPtr, true);
  }

  public IntVector getConfiguredZones() {
    return new IntVector(ElkM1APIJNI.M1API_getConfiguredZones(swigCPtr, this), true);
  }

  public IntVector getConfiguredKeypads() {
    return new IntVector(ElkM1APIJNI.M1API_getConfiguredKeypads(swigCPtr, this), true);
  }

  public TempDevicePairVector getConfiguredTempDevices() {
    return new TempDevicePairVector(ElkM1APIJNI.M1API_getConfiguredTempDevices(swigCPtr, this), true);
  }

  public void armDisarm(int partition, ArmMode mode, String userCode) {
    ElkM1APIJNI.M1API_armDisarm(swigCPtr, this, partition, mode.swigValue(), userCode);
  }

  public ArmStatusVector getArmStatus() {
    return new ArmStatusVector(ElkM1APIJNI.M1API_getArmStatus(swigCPtr, this), true);
  }

  public ZoneDefinitionVector getZoneAlarms() {
    return new ZoneDefinitionVector(ElkM1APIJNI.M1API_getZoneAlarms(swigCPtr, this), true);
  }

  public AudioData getAudioData(int audioZone) {
    return new AudioData(ElkM1APIJNI.M1API_getAudioData(swigCPtr, this, audioZone), true);
  }

  public void enableControlOutput(int output, int seconds) {
    ElkM1APIJNI.M1API_enableControlOutput(swigCPtr, this, output, seconds);
  }

  public void disableControlOutput(int output) {
    ElkM1APIJNI.M1API_disableControlOutput(swigCPtr, this, output);
  }

  public void toggleControlOutput(int output) {
    ElkM1APIJNI.M1API_toggleControlOutput(swigCPtr, this, output);
  }

  public BoolVector getControlOutputs() {
    return new BoolVector(ElkM1APIJNI.M1API_getControlOutputs(swigCPtr, this), true);
  }

  public int getCustomValue(int index) {
    return ElkM1APIJNI.M1API_getCustomValue(swigCPtr, this, index);
  }

  public UShortVector getCustomValues() {
    return new UShortVector(ElkM1APIJNI.M1API_getCustomValues(swigCPtr, this), true);
  }

  public void setCustomValue(int index, int value) {
    ElkM1APIJNI.M1API_setCustomValue(swigCPtr, this, index, value);
  }

  public UserCodeSuccess requestChangeUserCode(int user, String authCode, String newUserCode, short areaMask) {
    return UserCodeSuccess.swigToEnum(ElkM1APIJNI.M1API_requestChangeUserCode(swigCPtr, this, user, authCode, newUserCode, areaMask));
  }

  public int getCounterValue(int counter) {
    return ElkM1APIJNI.M1API_getCounterValue(swigCPtr, this, counter);
  }

  public int setCounterValue(int counter, int value) {
    return ElkM1APIJNI.M1API_setCounterValue(swigCPtr, this, counter, value);
  }

  public void displayLCDText(int area, clearMethod clear, boolean beepKeypad, int displayTime, String text) {
    ElkM1APIJNI.M1API_displayLCDText__SWIG_0(swigCPtr, this, area, clear.swigValue(), beepKeypad, displayTime, text);
  }

  public void displayLCDText(int area, clearMethod clear, boolean beepKeypad, int displayTime, String lineOne, String lineTwo) {
    ElkM1APIJNI.M1API_displayLCDText__SWIG_1(swigCPtr, this, area, clear.swigValue(), beepKeypad, displayTime, lineOne, lineTwo);
  }

  public int getLightingStatus(int device) {
    return ElkM1APIJNI.M1API_getLightingStatus(swigCPtr, this, device);
  }

  public IntVector getKeypadAreas() {
    return new IntVector(ElkM1APIJNI.M1API_getKeypadAreas(swigCPtr, this), true);
  }

  public KeypadFkeyStatus getKeypadFkeyStatus(int keypad) {
    return new KeypadFkeyStatus(ElkM1APIJNI.M1API_getKeypadFkeyStatus(swigCPtr, this, keypad), true);
  }

  public ChimeModeVector pressFunctionKey(int keypad, FKEY key) {
    return new ChimeModeVector(ElkM1APIJNI.M1API_pressFunctionKey(swigCPtr, this, keypad, key.swigValue()), true);
  }

  public LogEntry getLogData(int index) {
    return new LogEntry(ElkM1APIJNI.M1API_getLogData(swigCPtr, this, index), true);
  }

  public LogEntryVector getLogs() {
    return new LogEntryVector(ElkM1APIJNI.M1API_getLogs(swigCPtr, this), true);
  }

  public void setLogData(int logType, int eventType, int zoneNumber, int area) {
    ElkM1APIJNI.M1API_setLogData(swigCPtr, this, logType, eventType, zoneNumber, area);
  }

  public void executePLCCommand(char houseCode, int unitCode, int functionCode, int extendedCode, int timeOn) {
    ElkM1APIJNI.M1API_executePLCCommand(swigCPtr, this, houseCode, unitCode, functionCode, extendedCode, timeOn);
  }

  public void setPLCState(char houseCode, int unitCode, boolean state) {
    ElkM1APIJNI.M1API_setPLCState(swigCPtr, this, houseCode, unitCode, state);
  }

  public void togglePLCState(char houseCode, int unitCode) {
    ElkM1APIJNI.M1API_togglePLCState(swigCPtr, this, houseCode, unitCode);
  }

  public IntVector getPLCStatus(int bank) {
    return new IntVector(ElkM1APIJNI.M1API_getPLCStatus(swigCPtr, this, bank), true);
  }

  public RTCData getRTCData() {
    return new RTCData(ElkM1APIJNI.M1API_getRTCData(swigCPtr, this), true);
  }

  public RTCData setRTCData(RTCData newData) {
    return new RTCData(ElkM1APIJNI.M1API_setRTCData(swigCPtr, this, RTCData.getCPtr(newData), newData), true);
  }

  public String getTextDescription(TextDescriptionType type, int index) {
    return ElkM1APIJNI.M1API_getTextDescription(swigCPtr, this, type.swigValue(), index);
  }

  public SystemTroubleStatus getSystemTroubleStatus() {
    return new SystemTroubleStatus(ElkM1APIJNI.M1API_getSystemTroubleStatus(swigCPtr, this), true);
  }

  public int getTemperature(TemperatureDevice type, int device) {
    return ElkM1APIJNI.M1API_getTemperature(swigCPtr, this, type.swigValue(), device);
  }

  public IntVector getTemperatures(TemperatureDevice type) {
    return new IntVector(ElkM1APIJNI.M1API_getTemperatures(swigCPtr, this, type.swigValue()), true);
  }

  public void speakWord(SirenWord word) {
    ElkM1APIJNI.M1API_speakWord(swigCPtr, this, word.swigValue());
  }

  public void speakPhrase(SirenPhrase phrase) {
    ElkM1APIJNI.M1API_speakPhrase(swigCPtr, this, phrase.swigValue());
  }

  public CharVector getOmnistat2Data(CharVector request) {
    return new CharVector(ElkM1APIJNI.M1API_getOmnistat2Data(swigCPtr, this, CharVector.getCPtr(request), request), true);
  }

  public void activateTask(int taskNumber) {
    ElkM1APIJNI.M1API_activateTask(swigCPtr, this, taskNumber);
  }

  public ThermostatData getThermostatData(int index) {
    return new ThermostatData(ElkM1APIJNI.M1API_getThermostatData(swigCPtr, this, index), true);
  }

  public ThermostatData setThermostatData(int index, int value, int element) {
    return new ThermostatData(ElkM1APIJNI.M1API_setThermostatData(swigCPtr, this, index, value, element), true);
  }

  public UserCodeAccess getUserCodeAccess(String userCode) {
    return new UserCodeAccess(ElkM1APIJNI.M1API_getUserCodeAccess(swigCPtr, this, userCode), true);
  }

  public IntVector getM1VersionNumber() {
    return new IntVector(ElkM1APIJNI.M1API_getM1VersionNumber(swigCPtr, this), true);
  }

  public boolean zoneBypass(int zone, String pinCode) {
    return ElkM1APIJNI.M1API_zoneBypass(swigCPtr, this, zone, pinCode);
  }

  public boolean setAreaBypass(int area, String pinCode, boolean bypassed) {
    return ElkM1APIJNI.M1API_setAreaBypass(swigCPtr, this, area, pinCode, bypassed);
  }

  public ZoneDefinitionVector getZoneDefinitions() {
    return new ZoneDefinitionVector(ElkM1APIJNI.M1API_getZoneDefinitions(swigCPtr, this), true);
  }

  public IntVector getZonePartitions() {
    return new IntVector(ElkM1APIJNI.M1API_getZonePartitions(swigCPtr, this), true);
  }

  public ZoneStateVector getZoneStatuses() {
    return new ZoneStateVector(ElkM1APIJNI.M1API_getZoneStatuses(swigCPtr, this), true);
  }

  public float getZoneVoltage(int zone) {
    return ElkM1APIJNI.M1API_getZoneVoltage(swigCPtr, this, zone);
  }

}
