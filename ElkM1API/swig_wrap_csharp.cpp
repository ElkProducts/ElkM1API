/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ElkM1API(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ElkM1API(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ElkM1API(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "ElkM1Definition.h"
#include "SwigCallbacks.h"
#include "ElkM1API.h"
#include "ElkM1Monitor.h"
#include "ElkM1AsciiAPI.h"
#include "ElkM1Connection.h"
#include "ElkM1SirenWords.h"
#include "ElkC1M1Tunnel.h"


#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< bool > *new_std_vector_Sl_bool_Sg___SWIG_2(int capacity){
        std::vector< bool >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< bool >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitemcopy(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__getitem(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__setitem(std::vector< bool > *self,int index,bool const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__AddRange(std::vector< bool > *self,std::vector< bool > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__GetRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< bool >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Insert(std::vector< bool > *self,int index,bool const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__InsertRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveAt(std::vector< bool > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_bool_Sg__RemoveRange(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< bool > *std_vector_Sl_bool_Sg__Repeat(bool const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< bool >(count, value);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_0(std::vector< bool > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_bool_Sg__Reverse__SWIG_1(std::vector< bool > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_bool_Sg__SetRange(std::vector< bool > *self,int index,std::vector< bool > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Contains(std::vector< bool > *self,bool const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_bool_Sg__IndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_bool_Sg__LastIndexOf(std::vector< bool > *self,bool const &value){
        int index = -1;
        std::vector< bool >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_bool_Sg__Remove(std::vector< bool > *self,bool const &value){
        std::vector< bool >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< char > *new_std_vector_Sl_char_Sg___SWIG_2(int capacity){
        std::vector< char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN char std_vector_Sl_char_Sg__getitemcopy(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN char const &std_vector_Sl_char_Sg__getitem(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__setitem(std::vector< char > *self,int index,char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__AddRange(std::vector< char > *self,std::vector< char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__GetRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Insert(std::vector< char > *self,int index,char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__InsertRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveAt(std::vector< char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_char_Sg__RemoveRange(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< char > *std_vector_Sl_char_Sg__Repeat(char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< char >(count, value);
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_0(std::vector< char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_char_Sg__Reverse__SWIG_1(std::vector< char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_char_Sg__SetRange(std::vector< char > *self,int index,std::vector< char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Contains(std::vector< char > *self,char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_char_Sg__IndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_char_Sg__LastIndexOf(std::vector< char > *self,char const &value){
        int index = -1;
        std::vector< char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_char_Sg__Remove(std::vector< char > *self,char const &value){
        std::vector< char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< uint16_t > *new_std_vector_Sl_uint16_t_Sg___SWIG_2(int capacity){
        std::vector< unsigned short >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned short >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned short std_vector_Sl_uint16_t_Sg__getitemcopy(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN unsigned short const &std_vector_Sl_uint16_t_Sg__getitem(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__setitem(std::vector< uint16_t > *self,int index,unsigned short const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__AddRange(std::vector< uint16_t > *self,std::vector< unsigned short > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__GetRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned short >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Insert(std::vector< uint16_t > *self,int index,unsigned short const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__InsertRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveAt(std::vector< uint16_t > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__RemoveRange(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned short > *std_vector_Sl_uint16_t_Sg__Repeat(unsigned short const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned short >(count, value);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(std::vector< uint16_t > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(std::vector< uint16_t > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_uint16_t_Sg__SetRange(std::vector< uint16_t > *self,int index,std::vector< unsigned short > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Contains(std::vector< uint16_t > *self,unsigned short const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__IndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_uint16_t_Sg__LastIndexOf(std::vector< uint16_t > *self,unsigned short const &value){
        int index = -1;
        std::vector< unsigned short >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_uint16_t_Sg__Remove(std::vector< uint16_t > *self,unsigned short const &value){
        std::vector< unsigned short >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< Elk::LogEntry > *new_std_vector_Sl_Elk_LogEntry_Sg___SWIG_2(int capacity){
        std::vector< Elk::LogEntry >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Elk::LogEntry >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Elk::LogEntry std_vector_Sl_Elk_LogEntry_Sg__getitemcopy(std::vector< Elk::LogEntry > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Elk::LogEntry const &std_vector_Sl_Elk_LogEntry_Sg__getitem(std::vector< Elk::LogEntry > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__setitem(std::vector< Elk::LogEntry > *self,int index,Elk::LogEntry const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__AddRange(std::vector< Elk::LogEntry > *self,std::vector< Elk::LogEntry > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Elk::LogEntry > *std_vector_Sl_Elk_LogEntry_Sg__GetRange(std::vector< Elk::LogEntry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Elk::LogEntry >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__Insert(std::vector< Elk::LogEntry > *self,int index,Elk::LogEntry const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__InsertRange(std::vector< Elk::LogEntry > *self,int index,std::vector< Elk::LogEntry > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__RemoveAt(std::vector< Elk::LogEntry > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__RemoveRange(std::vector< Elk::LogEntry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Elk::LogEntry > *std_vector_Sl_Elk_LogEntry_Sg__Repeat(Elk::LogEntry const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Elk::LogEntry >(count, value);
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__Reverse__SWIG_0(std::vector< Elk::LogEntry > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__Reverse__SWIG_1(std::vector< Elk::LogEntry > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_LogEntry_Sg__SetRange(std::vector< Elk::LogEntry > *self,int index,std::vector< Elk::LogEntry > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Elk::ArmStatus > *new_std_vector_Sl_Elk_ArmStatus_Sg___SWIG_2(int capacity){
        std::vector< Elk::ArmStatus >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Elk::ArmStatus >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Elk::ArmStatus std_vector_Sl_Elk_ArmStatus_Sg__getitemcopy(std::vector< Elk::ArmStatus > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Elk::ArmStatus const &std_vector_Sl_Elk_ArmStatus_Sg__getitem(std::vector< Elk::ArmStatus > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__setitem(std::vector< Elk::ArmStatus > *self,int index,Elk::ArmStatus const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__AddRange(std::vector< Elk::ArmStatus > *self,std::vector< Elk::ArmStatus > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Elk::ArmStatus > *std_vector_Sl_Elk_ArmStatus_Sg__GetRange(std::vector< Elk::ArmStatus > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Elk::ArmStatus >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__Insert(std::vector< Elk::ArmStatus > *self,int index,Elk::ArmStatus const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__InsertRange(std::vector< Elk::ArmStatus > *self,int index,std::vector< Elk::ArmStatus > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__RemoveAt(std::vector< Elk::ArmStatus > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__RemoveRange(std::vector< Elk::ArmStatus > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Elk::ArmStatus > *std_vector_Sl_Elk_ArmStatus_Sg__Repeat(Elk::ArmStatus const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Elk::ArmStatus >(count, value);
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__Reverse__SWIG_0(std::vector< Elk::ArmStatus > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__Reverse__SWIG_1(std::vector< Elk::ArmStatus > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_ArmStatus_Sg__SetRange(std::vector< Elk::ArmStatus > *self,int index,std::vector< Elk::ArmStatus > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Elk::ZoneState > *new_std_vector_Sl_Elk_ZoneState_Sg___SWIG_2(int capacity){
        std::vector< Elk::ZoneState >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Elk::ZoneState >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Elk::ZoneState std_vector_Sl_Elk_ZoneState_Sg__getitemcopy(std::vector< Elk::ZoneState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Elk::ZoneState const &std_vector_Sl_Elk_ZoneState_Sg__getitem(std::vector< Elk::ZoneState > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__setitem(std::vector< Elk::ZoneState > *self,int index,Elk::ZoneState const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__AddRange(std::vector< Elk::ZoneState > *self,std::vector< Elk::ZoneState > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Elk::ZoneState > *std_vector_Sl_Elk_ZoneState_Sg__GetRange(std::vector< Elk::ZoneState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Elk::ZoneState >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__Insert(std::vector< Elk::ZoneState > *self,int index,Elk::ZoneState const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__InsertRange(std::vector< Elk::ZoneState > *self,int index,std::vector< Elk::ZoneState > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__RemoveAt(std::vector< Elk::ZoneState > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__RemoveRange(std::vector< Elk::ZoneState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Elk::ZoneState > *std_vector_Sl_Elk_ZoneState_Sg__Repeat(Elk::ZoneState const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Elk::ZoneState >(count, value);
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__Reverse__SWIG_0(std::vector< Elk::ZoneState > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__Reverse__SWIG_1(std::vector< Elk::ZoneState > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_ZoneState_Sg__SetRange(std::vector< Elk::ZoneState > *self,int index,std::vector< Elk::ZoneState > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::pair< int,Elk::TemperatureDevice > > *new_std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::pair< int,Elk::TemperatureDevice > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::pair< int,Elk::TemperatureDevice > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::pair< int,Elk::TemperatureDevice > std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__getitemcopy(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::pair< int,Elk::TemperatureDevice > const &std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__getitem(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__setitem(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,std::pair< int,Elk::TemperatureDevice > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__AddRange(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,std::vector< std::pair< int,Elk::TemperatureDevice > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::pair< int,Elk::TemperatureDevice > > *std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__GetRange(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::pair< int,Elk::TemperatureDevice > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Insert(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,std::pair< int,Elk::TemperatureDevice > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__InsertRange(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,std::vector< std::pair< int,Elk::TemperatureDevice > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__RemoveAt(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__RemoveRange(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::pair< int,Elk::TemperatureDevice > > *std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Repeat(std::pair< int,Elk::TemperatureDevice > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::pair< int,Elk::TemperatureDevice > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Reverse__SWIG_0(std::vector< std::pair< int,Elk::TemperatureDevice > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Reverse__SWIG_1(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__SetRange(std::vector< std::pair< int,Elk::TemperatureDevice > > *self,int index,std::vector< std::pair< int,Elk::TemperatureDevice > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Elk::SChimeMode > *new_std_vector_Sl_Elk_SChimeMode_Sg___SWIG_2(int capacity){
        std::vector< Elk::SChimeMode >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Elk::SChimeMode >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Elk::SChimeMode std_vector_Sl_Elk_SChimeMode_Sg__getitemcopy(std::vector< Elk::SChimeMode > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Elk::SChimeMode const &std_vector_Sl_Elk_SChimeMode_Sg__getitem(std::vector< Elk::SChimeMode > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__setitem(std::vector< Elk::SChimeMode > *self,int index,Elk::SChimeMode const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__AddRange(std::vector< Elk::SChimeMode > *self,std::vector< Elk::SChimeMode > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Elk::SChimeMode > *std_vector_Sl_Elk_SChimeMode_Sg__GetRange(std::vector< Elk::SChimeMode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Elk::SChimeMode >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__Insert(std::vector< Elk::SChimeMode > *self,int index,Elk::SChimeMode const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__InsertRange(std::vector< Elk::SChimeMode > *self,int index,std::vector< Elk::SChimeMode > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__RemoveAt(std::vector< Elk::SChimeMode > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__RemoveRange(std::vector< Elk::SChimeMode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Elk::SChimeMode > *std_vector_Sl_Elk_SChimeMode_Sg__Repeat(Elk::SChimeMode const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Elk::SChimeMode >(count, value);
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__Reverse__SWIG_0(std::vector< Elk::SChimeMode > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__Reverse__SWIG_1(std::vector< Elk::SChimeMode > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_SChimeMode_Sg__SetRange(std::vector< Elk::SChimeMode > *self,int index,std::vector< Elk::SChimeMode > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Elk::SZoneDefinition > *new_std_vector_Sl_Elk_SZoneDefinition_Sg___SWIG_2(int capacity){
        std::vector< Elk::SZoneDefinition >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Elk::SZoneDefinition >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Elk::SZoneDefinition std_vector_Sl_Elk_SZoneDefinition_Sg__getitemcopy(std::vector< Elk::SZoneDefinition > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Elk::SZoneDefinition const &std_vector_Sl_Elk_SZoneDefinition_Sg__getitem(std::vector< Elk::SZoneDefinition > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__setitem(std::vector< Elk::SZoneDefinition > *self,int index,Elk::SZoneDefinition const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__AddRange(std::vector< Elk::SZoneDefinition > *self,std::vector< Elk::SZoneDefinition > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Elk::SZoneDefinition > *std_vector_Sl_Elk_SZoneDefinition_Sg__GetRange(std::vector< Elk::SZoneDefinition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Elk::SZoneDefinition >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__Insert(std::vector< Elk::SZoneDefinition > *self,int index,Elk::SZoneDefinition const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__InsertRange(std::vector< Elk::SZoneDefinition > *self,int index,std::vector< Elk::SZoneDefinition > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__RemoveAt(std::vector< Elk::SZoneDefinition > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__RemoveRange(std::vector< Elk::SZoneDefinition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Elk::SZoneDefinition > *std_vector_Sl_Elk_SZoneDefinition_Sg__Repeat(Elk::SZoneDefinition const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Elk::SZoneDefinition >(count, value);
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__Reverse__SWIG_0(std::vector< Elk::SZoneDefinition > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__Reverse__SWIG_1(std::vector< Elk::SZoneDefinition > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Elk_SZoneDefinition_Sg__SetRange(std::vector< Elk::SZoneDefinition > *self,int index,std::vector< Elk::SZoneDefinition > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig_wrap_csharp.h"

SwigDirector_BoolCallback::SwigDirector_BoolCallback() : BoolCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_BoolCallback::run(bool arg1) {
  unsigned int jarg1  ;
  
  if (!swig_callbackrun) {
    throw Swig::DirectorPureVirtualException("BoolCallback::run");
  } else {
    jarg1 = arg1;
    swig_callbackrun(jarg1);
  }
}

SwigDirector_BoolCallback::~SwigDirector_BoolCallback() {
  
}


void SwigDirector_BoolCallback::swig_connect_director(SWIG_Callback0_t callbackrun) {
  swig_callbackrun = callbackrun;
}

void SwigDirector_BoolCallback::swig_init_callbacks() {
  swig_callbackrun = 0;
}

SwigDirector_IntCallback::SwigDirector_IntCallback() : IntCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_IntCallback::run(int arg1) {
  int jarg1  ;
  
  if (!swig_callbackrun) {
    throw Swig::DirectorPureVirtualException("IntCallback::run");
  } else {
    jarg1 = arg1;
    swig_callbackrun(jarg1);
  }
}

SwigDirector_IntCallback::~SwigDirector_IntCallback() {
  
}


void SwigDirector_IntCallback::swig_connect_director(SWIG_Callback0_t callbackrun) {
  swig_callbackrun = callbackrun;
}

void SwigDirector_IntCallback::swig_init_callbacks() {
  swig_callbackrun = 0;
}

SwigDirector_ArmStatusVectorCallback::SwigDirector_ArmStatusVectorCallback() : ArmStatusVectorCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_ArmStatusVectorCallback::run(std::vector< Elk::ArmStatus > status) {
  void * jstatus  ;
  
  if (!swig_callbackrun) {
    throw Swig::DirectorPureVirtualException("ArmStatusVectorCallback::run");
  } else {
    jstatus = (void *)new std::vector< Elk::ArmStatus >((const std::vector< Elk::ArmStatus > &)status); 
    swig_callbackrun(jstatus);
  }
}

SwigDirector_ArmStatusVectorCallback::~SwigDirector_ArmStatusVectorCallback() {
  
}


void SwigDirector_ArmStatusVectorCallback::swig_connect_director(SWIG_Callback0_t callbackrun) {
  swig_callbackrun = callbackrun;
}

void SwigDirector_ArmStatusVectorCallback::swig_init_callbacks() {
  swig_callbackrun = 0;
}

SwigDirector_StringCallback::SwigDirector_StringCallback() : StringCallback(), Swig::Director() {
  swig_init_callbacks();
}

void SwigDirector_StringCallback::run(std::string arg1) {
  char * jarg1  ;
  
  if (!swig_callbackrun) {
    throw Swig::DirectorPureVirtualException("StringCallback::run");
  } else {
    jarg1 = SWIG_csharp_string_callback((&arg1)->c_str()); 
    swig_callbackrun(jarg1);
  }
}

SwigDirector_StringCallback::~SwigDirector_StringCallback() {
  
}


void SwigDirector_StringCallback::swig_connect_director(SWIG_Callback0_t callbackrun) {
  swig_callbackrun = callbackrun;
}

void SwigDirector_StringCallback::swig_init_callbacks() {
  swig_callbackrun = 0;
}

SwigDirector_M1Connection::SwigDirector_M1Connection() : Elk::M1Connection(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_M1Connection::~SwigDirector_M1Connection() {
  
}


bool SwigDirector_M1Connection::Connect(std::string location, int port) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  char * jlocation  ;
  int jport  ;
  
  if (!swig_callbackConnect) {
    throw Swig::DirectorPureVirtualException("Elk::M1Connection::Connect");
  } else {
    jlocation = SWIG_csharp_string_callback((&location)->c_str()); 
    jport = port;
    jresult = (unsigned int) swig_callbackConnect(jlocation, jport);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_M1Connection::Disconnect() {
  if (!swig_callbackDisconnect) {
    throw Swig::DirectorPureVirtualException("Elk::M1Connection::Disconnect");
  } else {
    swig_callbackDisconnect();
  }
}

void SwigDirector_M1Connection::Send(std::vector< char > data) {
  void * jdata  ;
  
  if (!swig_callbackSend) {
    throw Swig::DirectorPureVirtualException("Elk::M1Connection::Send");
  } else {
    jdata = (void *)new std::vector< char >((const std::vector< char > &)data); 
    swig_callbackSend(jdata);
  }
}

std::vector< char > SwigDirector_M1Connection::Recieve() {
  std::vector< char > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackRecieve) {
    throw Swig::DirectorPureVirtualException("Elk::M1Connection::Recieve");
  } else {
    jresult = (void *) swig_callbackRecieve();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< char >", 0);
      return c_result;
    }
    c_result = *(std::vector< char > *)jresult; 
  }
  return c_result;
}

void SwigDirector_M1Connection::swig_connect_director(SWIG_Callback0_t callbackConnect, SWIG_Callback1_t callbackDisconnect, SWIG_Callback2_t callbackSend, SWIG_Callback3_t callbackRecieve) {
  swig_callbackConnect = callbackConnect;
  swig_callbackDisconnect = callbackDisconnect;
  swig_callbackSend = callbackSend;
  swig_callbackRecieve = callbackRecieve;
}

void SwigDirector_M1Connection::swig_init_callbacks() {
  swig_callbackConnect = 0;
  swig_callbackDisconnect = 0;
  swig_callbackSend = 0;
  swig_callbackRecieve = 0;
}

SwigDirector_C1M1Tunnel::SwigDirector_C1M1Tunnel(Elk::M1Connection *underlying) : Elk::C1M1Tunnel(underlying), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_C1M1Tunnel::~SwigDirector_C1M1Tunnel() {
  
}


bool SwigDirector_C1M1Tunnel::Connect(std::string location, int port) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  char * jlocation  ;
  int jport  ;
  
  if (!swig_callbackConnect) {
    return Elk::C1M1Tunnel::Connect(location,port);
  } else {
    jlocation = SWIG_csharp_string_callback((&location)->c_str()); 
    jport = port;
    jresult = (unsigned int) swig_callbackConnect(jlocation, jport);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_C1M1Tunnel::Disconnect() {
  if (!swig_callbackDisconnect) {
    Elk::C1M1Tunnel::Disconnect();
    return;
  } else {
    swig_callbackDisconnect();
  }
}

void SwigDirector_C1M1Tunnel::Send(std::vector< char > data) {
  void * jdata  ;
  
  if (!swig_callbackSend) {
    Elk::C1M1Tunnel::Send(data);
    return;
  } else {
    jdata = (void *)new std::vector< char >((const std::vector< char > &)data); 
    swig_callbackSend(jdata);
  }
}

std::vector< char > SwigDirector_C1M1Tunnel::Recieve() {
  std::vector< char > c_result ;
  void * jresult = 0 ;
  
  if (!swig_callbackRecieve) {
    return Elk::C1M1Tunnel::Recieve();
  } else {
    jresult = (void *) swig_callbackRecieve();
    if (!jresult) {
      SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Unexpected null return for type std::vector< char >", 0);
      return c_result;
    }
    c_result = *(std::vector< char > *)jresult; 
  }
  return c_result;
}

void SwigDirector_C1M1Tunnel::swig_connect_director(SWIG_Callback0_t callbackConnect, SWIG_Callback1_t callbackDisconnect, SWIG_Callback2_t callbackSend, SWIG_Callback3_t callbackRecieve) {
  swig_callbackConnect = callbackConnect;
  swig_callbackDisconnect = callbackDisconnect;
  swig_callbackSend = callbackSend;
  swig_callbackRecieve = callbackRecieve;
}

void SwigDirector_C1M1Tunnel::swig_init_callbacks() {
  swig_callbackConnect = 0;
  swig_callbackDisconnect = 0;
  swig_callbackSend = 0;
  swig_callbackRecieve = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_Clear(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_Add(void * jarg1, unsigned int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->push_back((bool const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BoolVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BoolVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  result = ((std::vector< bool > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool >::size_type arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoolVector__SWIG_0() {
  void * jresult ;
  std::vector< bool > *result = 0 ;
  
  result = (std::vector< bool > *)new std::vector< bool >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoolVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< bool > *arg1 = 0 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< bool > *)new std::vector< bool >((std::vector< bool > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoolVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< bool > *)new_std_vector_Sl_bool_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolVector_getitem(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (bool)std_vector_Sl_bool_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_setitem(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__setitem(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  std::vector< bool > *arg2 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (std::vector< bool > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_bool_Sg__AddRange(arg1,(std::vector< bool > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoolVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< bool > *result = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_Insert(void * jarg1, int jarg2, unsigned int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  bool temp3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = jarg3 ? true : false; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_bool_Sg__Insert(arg1,arg2,(bool const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__InsertRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_bool_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BoolVector_Repeat(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool *arg1 = 0 ;
  int arg2 ;
  bool temp1 ;
  std::vector< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< bool > *)std_vector_Sl_bool_Sg__Repeat((bool const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  std_vector_Sl_bool_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_bool_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  int arg2 ;
  std::vector< bool > *arg3 = 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< bool > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_bool_Sg__SetRange(arg1,arg2,(std::vector< bool > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolVector_Contains(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Contains(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BoolVector_IndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__IndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BoolVector_LastIndexOf(void * jarg1, unsigned int jarg2) {
  int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  int result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_bool_Sg__LastIndexOf(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BoolVector_Remove(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  bool result;
  
  arg1 = (std::vector< bool > *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_bool_Sg__Remove(arg1,(bool const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoolVector(void * jarg1) {
  std::vector< bool > *arg1 = (std::vector< bool > *) 0 ;
  
  arg1 = (std::vector< bool > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Clear(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Add(void * jarg1, char jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((char const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CharVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_CharVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type result;
  
  arg1 = (std::vector< char > *)jarg1; 
  result = ((std::vector< char > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_0() {
  void * jresult ;
  std::vector< char > *result = 0 ;
  
  result = (std::vector< char > *)new std::vector< char >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< char > *arg1 = 0 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< char > *)new_std_vector_Sl_char_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharVector_getitemcopy(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char)std_vector_Sl_char_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharVector_getitem(void * jarg1, int jarg2) {
  char jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (char *) &std_vector_Sl_char_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_setitem(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__setitem(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (std::vector< char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_char_Sg__AddRange(arg1,(std::vector< char > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< char > *result = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Insert(void * jarg1, int jarg2, char jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  char *arg3 = 0 ;
  char temp3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (char)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_char_Sg__Insert(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__InsertRange(arg1,arg2,(std::vector< char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_char_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharVector_Repeat(char jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = 0 ;
  int arg2 ;
  char temp1 ;
  std::vector< char > *result = 0 ;
  
  temp1 = (char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< char > *)std_vector_Sl_char_Sg__Repeat((char const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  std_vector_Sl_char_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  int arg2 ;
  std::vector< char > *arg3 = 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< char > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_char_Sg__SetRange(arg1,arg2,(std::vector< char > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharVector_Contains(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Contains(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharVector_IndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__IndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharVector_LastIndexOf(void * jarg1, char jarg2) {
  int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  int result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_char_Sg__LastIndexOf(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharVector_Remove(void * jarg1, char jarg2) {
  unsigned int jresult ;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  char *arg2 = 0 ;
  char temp2 ;
  bool result;
  
  arg1 = (std::vector< char > *)jarg1; 
  temp2 = (char)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_char_Sg__Remove(arg1,(char const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharVector(void * jarg1) {
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  
  arg1 = (std::vector< char > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Clear(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Add(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_0() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_setitem(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Insert(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IntVector_Repeat(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntVector_LastIndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntVector_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntVector(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_Clear(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_Add(void * jarg1, unsigned short jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((unsigned short const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UShortVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UShortVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  result = ((std::vector< uint16_t > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short >::size_type arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UShortVector__SWIG_0() {
  void * jresult ;
  std::vector< uint16_t > *result = 0 ;
  
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UShortVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = 0 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint16_t > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< uint16_t > *)new std::vector< uint16_t >((std::vector< uint16_t > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UShortVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< uint16_t > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< uint16_t > *)new_std_vector_Sl_uint16_t_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_UShortVector_getitemcopy(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned short)std_vector_Sl_uint16_t_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_UShortVector_getitem(void * jarg1, int jarg2) {
  unsigned short jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (unsigned short *) &std_vector_Sl_uint16_t_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_setitem(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__setitem(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  std::vector< unsigned short > *arg2 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (std::vector< unsigned short > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_uint16_t_Sg__AddRange(arg1,(std::vector< unsigned short > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UShortVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned short > *result = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_Insert(void * jarg1, int jarg2, unsigned short jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  unsigned short *arg3 = 0 ;
  unsigned short temp3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned short)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_uint16_t_Sg__Insert(arg1,arg2,(unsigned short const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__InsertRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UShortVector_Repeat(unsigned short jarg1, int jarg2) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  int arg2 ;
  unsigned short temp1 ;
  std::vector< unsigned short > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< unsigned short > *)std_vector_Sl_uint16_t_Sg__Repeat((unsigned short const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  std_vector_Sl_uint16_t_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_uint16_t_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_UShortVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  int arg2 ;
  std::vector< unsigned short > *arg3 = 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned short > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned short > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_uint16_t_Sg__SetRange(arg1,arg2,(std::vector< unsigned short > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UShortVector_Contains(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Contains(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UShortVector_IndexOf(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__IndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UShortVector_LastIndexOf(void * jarg1, unsigned short jarg2) {
  int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  int result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_uint16_t_Sg__LastIndexOf(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UShortVector_Remove(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  unsigned short *arg2 = 0 ;
  unsigned short temp2 ;
  bool result;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  temp2 = (unsigned short)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_uint16_t_Sg__Remove(arg1,(unsigned short const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UShortVector(void * jarg1) {
  std::vector< uint16_t > *arg1 = (std::vector< uint16_t > *) 0 ;
  
  arg1 = (std::vector< uint16_t > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_Clear(void * jarg1) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_Add(void * jarg1, void * jarg2) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  Elk::LogEntry *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (Elk::LogEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::LogEntry const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Elk::LogEntry const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LogEntryVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type result;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  result = ((std::vector< Elk::LogEntry > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_LogEntryVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type result;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  result = ((std::vector< Elk::LogEntry > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry >::size_type arg2 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (std::vector< Elk::LogEntry >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogEntryVector__SWIG_0() {
  void * jresult ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  result = (std::vector< Elk::LogEntry > *)new std::vector< Elk::LogEntry >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogEntryVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Elk::LogEntry > *arg1 = 0 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::LogEntry > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Elk::LogEntry > *)new std::vector< Elk::LogEntry >((std::vector< Elk::LogEntry > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogEntryVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Elk::LogEntry > *)new_std_vector_Sl_Elk_LogEntry_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogEntryVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  Elk::LogEntry result;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Elk_LogEntry_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Elk::LogEntry((const Elk::LogEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogEntryVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  Elk::LogEntry *result = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Elk::LogEntry *) &std_vector_Sl_Elk_LogEntry_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  Elk::LogEntry *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::LogEntry *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::LogEntry const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__setitem(arg1,arg2,(Elk::LogEntry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  std::vector< Elk::LogEntry > *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (std::vector< Elk::LogEntry > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::LogEntry > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Elk_LogEntry_Sg__AddRange(arg1,(std::vector< Elk::LogEntry > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogEntryVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Elk::LogEntry > *)std_vector_Sl_Elk_LogEntry_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  Elk::LogEntry *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::LogEntry *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::LogEntry const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__Insert(arg1,arg2,(Elk::LogEntry const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  std::vector< Elk::LogEntry > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::LogEntry > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::LogEntry > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__InsertRange(arg1,arg2,(std::vector< Elk::LogEntry > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LogEntryVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::LogEntry *arg1 = 0 ;
  int arg2 ;
  std::vector< Elk::LogEntry > *result = 0 ;
  
  arg1 = (Elk::LogEntry *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::LogEntry const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::LogEntry > *)std_vector_Sl_Elk_LogEntry_Sg__Repeat((Elk::LogEntry const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  std_vector_Sl_Elk_LogEntry_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntryVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  int arg2 ;
  std::vector< Elk::LogEntry > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::LogEntry > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::LogEntry > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_LogEntry_Sg__SetRange(arg1,arg2,(std::vector< Elk::LogEntry > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogEntryVector(void * jarg1) {
  std::vector< Elk::LogEntry > *arg1 = (std::vector< Elk::LogEntry > *) 0 ;
  
  arg1 = (std::vector< Elk::LogEntry > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_Clear(void * jarg1) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_Add(void * jarg1, void * jarg2) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  Elk::ArmStatus *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (Elk::ArmStatus *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ArmStatus const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Elk::ArmStatus const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArmStatusVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type result;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  result = ((std::vector< Elk::ArmStatus > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ArmStatusVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type result;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  result = ((std::vector< Elk::ArmStatus > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus >::size_type arg2 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (std::vector< Elk::ArmStatus >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmStatusVector__SWIG_0() {
  void * jresult ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  result = (std::vector< Elk::ArmStatus > *)new std::vector< Elk::ArmStatus >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmStatusVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Elk::ArmStatus > *arg1 = 0 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ArmStatus > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Elk::ArmStatus > *)new std::vector< Elk::ArmStatus >((std::vector< Elk::ArmStatus > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmStatusVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Elk::ArmStatus > *)new_std_vector_Sl_Elk_ArmStatus_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArmStatusVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  Elk::ArmStatus result;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Elk_ArmStatus_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Elk::ArmStatus((const Elk::ArmStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArmStatusVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  Elk::ArmStatus *result = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Elk::ArmStatus *) &std_vector_Sl_Elk_ArmStatus_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  Elk::ArmStatus *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ArmStatus *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ArmStatus const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__setitem(arg1,arg2,(Elk::ArmStatus const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  std::vector< Elk::ArmStatus > *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (std::vector< Elk::ArmStatus > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ArmStatus > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Elk_ArmStatus_Sg__AddRange(arg1,(std::vector< Elk::ArmStatus > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArmStatusVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Elk::ArmStatus > *)std_vector_Sl_Elk_ArmStatus_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  Elk::ArmStatus *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ArmStatus *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ArmStatus const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__Insert(arg1,arg2,(Elk::ArmStatus const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  std::vector< Elk::ArmStatus > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::ArmStatus > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ArmStatus > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__InsertRange(arg1,arg2,(std::vector< Elk::ArmStatus > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ArmStatusVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::ArmStatus *arg1 = 0 ;
  int arg2 ;
  std::vector< Elk::ArmStatus > *result = 0 ;
  
  arg1 = (Elk::ArmStatus *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ArmStatus const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::ArmStatus > *)std_vector_Sl_Elk_ArmStatus_Sg__Repeat((Elk::ArmStatus const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  std_vector_Sl_Elk_ArmStatus_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  int arg2 ;
  std::vector< Elk::ArmStatus > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::ArmStatus > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ArmStatus > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ArmStatus_Sg__SetRange(arg1,arg2,(std::vector< Elk::ArmStatus > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArmStatusVector(void * jarg1) {
  std::vector< Elk::ArmStatus > *arg1 = (std::vector< Elk::ArmStatus > *) 0 ;
  
  arg1 = (std::vector< Elk::ArmStatus > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_Clear(void * jarg1) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_Add(void * jarg1, void * jarg2) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  Elk::ZoneState *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (Elk::ZoneState *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ZoneState const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Elk::ZoneState const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZoneStateVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type result;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  result = ((std::vector< Elk::ZoneState > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZoneStateVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type result;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  result = ((std::vector< Elk::ZoneState > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState >::size_type arg2 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (std::vector< Elk::ZoneState >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneStateVector__SWIG_0() {
  void * jresult ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  result = (std::vector< Elk::ZoneState > *)new std::vector< Elk::ZoneState >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneStateVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Elk::ZoneState > *arg1 = 0 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ZoneState > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Elk::ZoneState > *)new std::vector< Elk::ZoneState >((std::vector< Elk::ZoneState > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneStateVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Elk::ZoneState > *)new_std_vector_Sl_Elk_ZoneState_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneStateVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  Elk::ZoneState result;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Elk_ZoneState_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Elk::ZoneState((const Elk::ZoneState &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneStateVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  Elk::ZoneState *result = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Elk::ZoneState *) &std_vector_Sl_Elk_ZoneState_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  Elk::ZoneState *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ZoneState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ZoneState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__setitem(arg1,arg2,(Elk::ZoneState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  std::vector< Elk::ZoneState > *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (std::vector< Elk::ZoneState > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ZoneState > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Elk_ZoneState_Sg__AddRange(arg1,(std::vector< Elk::ZoneState > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneStateVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Elk::ZoneState > *)std_vector_Sl_Elk_ZoneState_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  Elk::ZoneState *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ZoneState *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ZoneState const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__Insert(arg1,arg2,(Elk::ZoneState const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  std::vector< Elk::ZoneState > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::ZoneState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ZoneState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__InsertRange(arg1,arg2,(std::vector< Elk::ZoneState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneStateVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::ZoneState *arg1 = 0 ;
  int arg2 ;
  std::vector< Elk::ZoneState > *result = 0 ;
  
  arg1 = (Elk::ZoneState *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::ZoneState const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::ZoneState > *)std_vector_Sl_Elk_ZoneState_Sg__Repeat((Elk::ZoneState const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  std_vector_Sl_Elk_ZoneState_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneStateVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  int arg2 ;
  std::vector< Elk::ZoneState > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::ZoneState > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::ZoneState > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_ZoneState_Sg__SetRange(arg1,arg2,(std::vector< Elk::ZoneState > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneStateVector(void * jarg1) {
  std::vector< Elk::ZoneState > *arg1 = (std::vector< Elk::ZoneState > *) 0 ;
  
  arg1 = (std::vector< Elk::ZoneState > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePair__SWIG_0() {
  void * jresult ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePair__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  Elk::TemperatureDevice arg2 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = 0 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Elk::TemperatureDevice > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< int,Elk::TemperatureDevice > *)new std::pair< int,Elk::TemperatureDevice >((std::pair< int,Elk::TemperatureDevice > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePair_first_set(void * jarg1, int jarg2) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TempDevicePair_first_get(void * jarg1) {
  int jresult ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  int result;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1; 
  result = (int) ((arg1)->first);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePair_second_set(void * jarg1, int jarg2) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  Elk::TemperatureDevice arg2 ;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TempDevicePair_second_get(void * jarg1) {
  int jresult ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  Elk::TemperatureDevice result;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1; 
  result = (Elk::TemperatureDevice) ((arg1)->second);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TempDevicePair(void * jarg1) {
  std::pair< int,Elk::TemperatureDevice > *arg1 = (std::pair< int,Elk::TemperatureDevice > *) 0 ;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_Clear(void * jarg1) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_Add(void * jarg1, void * jarg2) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::pair< int,Elk::TemperatureDevice > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (std::pair< int,Elk::TemperatureDevice > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Elk::TemperatureDevice > const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::pair< int,Elk::TemperatureDevice > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TempDevicePairVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type result;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  result = ((std::vector< std::pair< int,Elk::TemperatureDevice > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TempDevicePairVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type result;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  result = ((std::vector< std::pair< int,Elk::TemperatureDevice > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type arg2 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (std::vector< std::pair< int,Elk::TemperatureDevice > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePairVector__SWIG_0() {
  void * jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)new std::vector< std::pair< int,Elk::TemperatureDevice > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePairVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,Elk::TemperatureDevice > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)new std::vector< std::pair< int,Elk::TemperatureDevice > >((std::vector< std::pair< int,Elk::TemperatureDevice > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TempDevicePairVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)new_std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TempDevicePairVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::pair< int,Elk::TemperatureDevice > result;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new std::pair< int,Elk::TemperatureDevice >((const std::pair< int,Elk::TemperatureDevice > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TempDevicePairVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::pair< int,Elk::TemperatureDevice > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::pair< int,Elk::TemperatureDevice > *) &std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::pair< int,Elk::TemperatureDevice > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int,Elk::TemperatureDevice > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Elk::TemperatureDevice > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__setitem(arg1,arg2,(std::pair< int,Elk::TemperatureDevice > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,Elk::TemperatureDevice > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__AddRange(arg1,(std::vector< std::pair< int,Elk::TemperatureDevice > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TempDevicePairVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::pair< int,Elk::TemperatureDevice > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::pair< int,Elk::TemperatureDevice > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Elk::TemperatureDevice > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Insert(arg1,arg2,(std::pair< int,Elk::TemperatureDevice > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,Elk::TemperatureDevice > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::pair< int,Elk::TemperatureDevice > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TempDevicePairVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::pair< int,Elk::TemperatureDevice > *arg1 = 0 ;
  int arg2 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *result = 0 ;
  
  arg1 = (std::pair< int,Elk::TemperatureDevice > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< int,Elk::TemperatureDevice > const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Repeat((std::pair< int,Elk::TemperatureDevice > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_TempDevicePairVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::pair< int,Elk::TemperatureDevice > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_pair_Sl_int_Sc_Elk_TemperatureDevice_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::pair< int,Elk::TemperatureDevice > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TempDevicePairVector(void * jarg1) {
  std::vector< std::pair< int,Elk::TemperatureDevice > > *arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *) 0 ;
  
  arg1 = (std::vector< std::pair< int,Elk::TemperatureDevice > > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_Clear(void * jarg1) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_Add(void * jarg1, void * jarg2) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  Elk::SChimeMode *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (Elk::SChimeMode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SChimeMode const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Elk::SChimeMode const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChimeModeVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type result;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  result = ((std::vector< Elk::SChimeMode > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChimeModeVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type result;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  result = ((std::vector< Elk::SChimeMode > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode >::size_type arg2 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (std::vector< Elk::SChimeMode >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChimeModeVector__SWIG_0() {
  void * jresult ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  result = (std::vector< Elk::SChimeMode > *)new std::vector< Elk::SChimeMode >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChimeModeVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Elk::SChimeMode > *arg1 = 0 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SChimeMode > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Elk::SChimeMode > *)new std::vector< Elk::SChimeMode >((std::vector< Elk::SChimeMode > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChimeModeVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Elk::SChimeMode > *)new_std_vector_Sl_Elk_SChimeMode_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChimeModeVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  Elk::SChimeMode result;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Elk_SChimeMode_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Elk::SChimeMode((const Elk::SChimeMode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChimeModeVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  Elk::SChimeMode *result = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Elk::SChimeMode *) &std_vector_Sl_Elk_SChimeMode_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  Elk::SChimeMode *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::SChimeMode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SChimeMode const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__setitem(arg1,arg2,(Elk::SChimeMode const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  std::vector< Elk::SChimeMode > *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (std::vector< Elk::SChimeMode > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SChimeMode > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Elk_SChimeMode_Sg__AddRange(arg1,(std::vector< Elk::SChimeMode > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChimeModeVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Elk::SChimeMode > *)std_vector_Sl_Elk_SChimeMode_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  Elk::SChimeMode *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::SChimeMode *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SChimeMode const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__Insert(arg1,arg2,(Elk::SChimeMode const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  std::vector< Elk::SChimeMode > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::SChimeMode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SChimeMode > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__InsertRange(arg1,arg2,(std::vector< Elk::SChimeMode > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChimeModeVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::SChimeMode *arg1 = 0 ;
  int arg2 ;
  std::vector< Elk::SChimeMode > *result = 0 ;
  
  arg1 = (Elk::SChimeMode *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SChimeMode const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::SChimeMode > *)std_vector_Sl_Elk_SChimeMode_Sg__Repeat((Elk::SChimeMode const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  std_vector_Sl_Elk_SChimeMode_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChimeModeVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  int arg2 ;
  std::vector< Elk::SChimeMode > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::SChimeMode > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SChimeMode > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SChimeMode_Sg__SetRange(arg1,arg2,(std::vector< Elk::SChimeMode > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChimeModeVector(void * jarg1) {
  std::vector< Elk::SChimeMode > *arg1 = (std::vector< Elk::SChimeMode > *) 0 ;
  
  arg1 = (std::vector< Elk::SChimeMode > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_Clear(void * jarg1) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_Add(void * jarg1, void * jarg2) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  Elk::SZoneDefinition *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (Elk::SZoneDefinition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SZoneDefinition const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Elk::SZoneDefinition const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZoneDefinitionVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type result;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  result = ((std::vector< Elk::SZoneDefinition > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ZoneDefinitionVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type result;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  result = ((std::vector< Elk::SZoneDefinition > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition >::size_type arg2 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (std::vector< Elk::SZoneDefinition >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneDefinitionVector__SWIG_0() {
  void * jresult ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  result = (std::vector< Elk::SZoneDefinition > *)new std::vector< Elk::SZoneDefinition >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneDefinitionVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = 0 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SZoneDefinition > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Elk::SZoneDefinition > *)new std::vector< Elk::SZoneDefinition >((std::vector< Elk::SZoneDefinition > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneDefinitionVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Elk::SZoneDefinition > *)new_std_vector_Sl_Elk_SZoneDefinition_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDefinitionVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  Elk::SZoneDefinition result;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Elk_SZoneDefinition_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Elk::SZoneDefinition((const Elk::SZoneDefinition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDefinitionVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  Elk::SZoneDefinition *result = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Elk::SZoneDefinition *) &std_vector_Sl_Elk_SZoneDefinition_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  Elk::SZoneDefinition *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::SZoneDefinition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SZoneDefinition const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__setitem(arg1,arg2,(Elk::SZoneDefinition const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  std::vector< Elk::SZoneDefinition > *arg2 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (std::vector< Elk::SZoneDefinition > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SZoneDefinition > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Elk_SZoneDefinition_Sg__AddRange(arg1,(std::vector< Elk::SZoneDefinition > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDefinitionVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Elk::SZoneDefinition > *)std_vector_Sl_Elk_SZoneDefinition_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  Elk::SZoneDefinition *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::SZoneDefinition *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SZoneDefinition const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__Insert(arg1,arg2,(Elk::SZoneDefinition const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  std::vector< Elk::SZoneDefinition > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::SZoneDefinition > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SZoneDefinition > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__InsertRange(arg1,arg2,(std::vector< Elk::SZoneDefinition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZoneDefinitionVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::SZoneDefinition *arg1 = 0 ;
  int arg2 ;
  std::vector< Elk::SZoneDefinition > *result = 0 ;
  
  arg1 = (Elk::SZoneDefinition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Elk::SZoneDefinition const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Elk::SZoneDefinition > *)std_vector_Sl_Elk_SZoneDefinition_Sg__Repeat((Elk::SZoneDefinition const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  std_vector_Sl_Elk_SZoneDefinition_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneDefinitionVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  int arg2 ;
  std::vector< Elk::SZoneDefinition > *arg3 = 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Elk::SZoneDefinition > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Elk::SZoneDefinition > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Elk_SZoneDefinition_Sg__SetRange(arg1,arg2,(std::vector< Elk::SZoneDefinition > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneDefinitionVector(void * jarg1) {
  std::vector< Elk::SZoneDefinition > *arg1 = (std::vector< Elk::SZoneDefinition > *) 0 ;
  
  arg1 = (std::vector< Elk::SZoneDefinition > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SZoneDefinition_zd_set(void * jarg1, int jarg2) {
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  Elk::ZoneDefinition arg2 ;
  
  arg1 = (Elk::SZoneDefinition *)jarg1; 
  arg2 = (Elk::ZoneDefinition)jarg2; 
  if (arg1) (arg1)->zd = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SZoneDefinition_zd_get(void * jarg1) {
  int jresult ;
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  Elk::ZoneDefinition result;
  
  arg1 = (Elk::SZoneDefinition *)jarg1; 
  result = (Elk::ZoneDefinition) ((arg1)->zd);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SZoneDefinition() {
  void * jresult ;
  Elk::SZoneDefinition *result = 0 ;
  
  {
    try {
      result = (Elk::SZoneDefinition *)new Elk::SZoneDefinition();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SZoneDefinition(void * jarg1) {
  Elk::SZoneDefinition *arg1 = (Elk::SZoneDefinition *) 0 ;
  
  arg1 = (Elk::SZoneDefinition *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SChimeMode_cm_set(void * jarg1, int jarg2) {
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  Elk::ChimeMode arg2 ;
  
  arg1 = (Elk::SChimeMode *)jarg1; 
  arg2 = (Elk::ChimeMode)jarg2; 
  if (arg1) (arg1)->cm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SChimeMode_cm_get(void * jarg1) {
  int jresult ;
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  Elk::ChimeMode result;
  
  arg1 = (Elk::SChimeMode *)jarg1; 
  result = (Elk::ChimeMode) ((arg1)->cm);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SChimeMode() {
  void * jresult ;
  Elk::SChimeMode *result = 0 ;
  
  {
    try {
      result = (Elk::SChimeMode *)new Elk::SChimeMode();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SChimeMode(void * jarg1) {
  Elk::SChimeMode *arg1 = (Elk::SChimeMode *) 0 ;
  
  arg1 = (Elk::SChimeMode *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatus_mode_set(void * jarg1, int jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmMode arg2 ;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  arg2 = (Elk::ArmMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArmStatus_mode_get(void * jarg1) {
  int jresult ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmMode result;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  result = (Elk::ArmMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatus_isReady_set(void * jarg1, int jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmUpMode arg2 ;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  arg2 = (Elk::ArmUpMode)jarg2; 
  if (arg1) (arg1)->isReady = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArmStatus_isReady_get(void * jarg1) {
  int jresult ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::ArmUpMode result;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  result = (Elk::ArmUpMode) ((arg1)->isReady);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatus_alarm_set(void * jarg1, int jarg2) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::AlarmState arg2 ;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  arg2 = (Elk::AlarmState)jarg2; 
  if (arg1) (arg1)->alarm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ArmStatus_alarm_get(void * jarg1) {
  int jresult ;
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  Elk::AlarmState result;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  result = (Elk::AlarmState) ((arg1)->alarm);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmStatus() {
  void * jresult ;
  Elk::ArmStatus *result = 0 ;
  
  {
    try {
      result = (Elk::ArmStatus *)new Elk::ArmStatus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArmStatus(void * jarg1) {
  Elk::ArmStatus *arg1 = (Elk::ArmStatus *) 0 ;
  
  arg1 = (Elk::ArmStatus *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_zoneIsOn_set(void * jarg1, unsigned int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneIsOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioData_zoneIsOn_get(void * jarg1) {
  unsigned int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (bool) ((arg1)->zoneIsOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_loudness_set(void * jarg1, unsigned int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->loudness = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioData_loudness_get(void * jarg1) {
  unsigned int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (bool) ((arg1)->loudness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_doNotDisturb_set(void * jarg1, unsigned int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doNotDisturb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AudioData_doNotDisturb_get(void * jarg1) {
  unsigned int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (bool) ((arg1)->doNotDisturb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_source_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_source_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (int) ((arg1)->source);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_volume_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_volume_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (int) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_bass_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_bass_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (int) ((arg1)->bass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_treble_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->treble = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_treble_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (int) ((arg1)->treble);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_balance_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_balance_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (int) ((arg1)->balance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AudioData_partyMode_set(void * jarg1, int jarg2) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  enum Elk::AudioData::PartyMode arg2 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  arg2 = (enum Elk::AudioData::PartyMode)jarg2; 
  if (arg1) (arg1)->partyMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AudioData_partyMode_get(void * jarg1) {
  int jresult ;
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  enum Elk::AudioData::PartyMode result;
  
  arg1 = (Elk::AudioData *)jarg1; 
  result = (enum Elk::AudioData::PartyMode) ((arg1)->partyMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AudioData() {
  void * jresult ;
  Elk::AudioData *result = 0 ;
  
  {
    try {
      result = (Elk::AudioData *)new Elk::AudioData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AudioData(void * jarg1) {
  Elk::AudioData *arg1 = (Elk::AudioData *) 0 ;
  
  arg1 = (Elk::AudioData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry__event_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry__event_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->event);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_eventSubjectNumber_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventSubjectNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_eventSubjectNumber_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->eventSubjectNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_area_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->area = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_area_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->area);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_hour_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_hour_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_minute_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_minute_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_month_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_month_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_day_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_day_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_index_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_index_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_year_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_year_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogEntry_dayOfWeek_set(void * jarg1, int jarg2) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  Elk::Weekday arg2 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  arg2 = (Elk::Weekday)jarg2; 
  if (arg1) (arg1)->dayOfWeek = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LogEntry_dayOfWeek_get(void * jarg1) {
  int jresult ;
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  Elk::Weekday result;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  result = (Elk::Weekday) ((arg1)->dayOfWeek);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogEntry() {
  void * jresult ;
  Elk::LogEntry *result = 0 ;
  
  {
    try {
      result = (Elk::LogEntry *)new Elk::LogEntry();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogEntry(void * jarg1) {
  Elk::LogEntry *arg1 = (Elk::LogEntry *) 0 ;
  
  arg1 = (Elk::LogEntry *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneState_physicalState_set(void * jarg1, int jarg2) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::PhysicalZoneState arg2 ;
  
  arg1 = (Elk::ZoneState *)jarg1; 
  arg2 = (Elk::PhysicalZoneState)jarg2; 
  if (arg1) (arg1)->physicalState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneState_physicalState_get(void * jarg1) {
  int jresult ;
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::PhysicalZoneState result;
  
  arg1 = (Elk::ZoneState *)jarg1; 
  result = (Elk::PhysicalZoneState) ((arg1)->physicalState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ZoneState_logicalState_set(void * jarg1, int jarg2) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::LogicalZoneState arg2 ;
  
  arg1 = (Elk::ZoneState *)jarg1; 
  arg2 = (Elk::LogicalZoneState)jarg2; 
  if (arg1) (arg1)->logicalState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZoneState_logicalState_get(void * jarg1) {
  int jresult ;
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  Elk::LogicalZoneState result;
  
  arg1 = (Elk::ZoneState *)jarg1; 
  result = (Elk::LogicalZoneState) ((arg1)->logicalState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ZoneState() {
  void * jresult ;
  Elk::ZoneState *result = 0 ;
  
  {
    try {
      result = (Elk::ZoneState *)new Elk::ZoneState();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ZoneState(void * jarg1) {
  Elk::ZoneState *arg1 = (Elk::ZoneState *) 0 ;
  
  arg1 = (Elk::ZoneState *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_seconds_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seconds = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_seconds_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->seconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_minutes_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minutes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_minutes_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->minutes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_hours_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hours = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_hours_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->hours);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_weekday_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  Elk::Weekday arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (Elk::Weekday)jarg2; 
  if (arg1) (arg1)->weekday = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_weekday_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  Elk::Weekday result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (Elk::Weekday) ((arg1)->weekday);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_day_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_day_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_month_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_month_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_year_set(void * jarg1, int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RTCData_year_get(void * jarg1) {
  int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_twelveHourClock_set(void * jarg1, unsigned int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->twelveHourClock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RTCData_twelveHourClock_get(void * jarg1) {
  unsigned int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (bool) ((arg1)->twelveHourClock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RTCData_dayBeforeMonth_set(void * jarg1, unsigned int jarg2) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dayBeforeMonth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RTCData_dayBeforeMonth_get(void * jarg1) {
  unsigned int jresult ;
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  bool result;
  
  arg1 = (Elk::RTCData *)jarg1; 
  result = (bool) ((arg1)->dayBeforeMonth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RTCData() {
  void * jresult ;
  Elk::RTCData *result = 0 ;
  
  {
    try {
      result = (Elk::RTCData *)new Elk::RTCData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RTCData(void * jarg1) {
  Elk::RTCData *arg1 = (Elk::RTCData *) 0 ;
  
  arg1 = (Elk::RTCData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_mode_set(void * jarg1, int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  enum Elk::ThermostatData::ThermostatMode arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = (enum Elk::ThermostatData::ThermostatMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ThermostatData_mode_get(void * jarg1) {
  int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  enum Elk::ThermostatData::ThermostatMode result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (enum Elk::ThermostatData::ThermostatMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_holdCurrentTemperature_set(void * jarg1, unsigned int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->holdCurrentTemperature = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ThermostatData_holdCurrentTemperature_get(void * jarg1) {
  unsigned int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (bool) ((arg1)->holdCurrentTemperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_fanOn_set(void * jarg1, unsigned int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fanOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ThermostatData_fanOn_get(void * jarg1) {
  unsigned int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  bool result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (bool) ((arg1)->fanOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_temperature_set(void * jarg1, int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ThermostatData_temperature_get(void * jarg1) {
  int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (int) ((arg1)->temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_heatSetPoint_set(void * jarg1, int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heatSetPoint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ThermostatData_heatSetPoint_get(void * jarg1) {
  int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (int) ((arg1)->heatSetPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_coolSetPoint_set(void * jarg1, int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->coolSetPoint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ThermostatData_coolSetPoint_get(void * jarg1) {
  int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (int) ((arg1)->coolSetPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThermostatData_humidity_set(void * jarg1, int jarg2) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->humidity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ThermostatData_humidity_get(void * jarg1) {
  int jresult ;
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  result = (int) ((arg1)->humidity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ThermostatData() {
  void * jresult ;
  Elk::ThermostatData *result = 0 ;
  
  {
    try {
      result = (Elk::ThermostatData *)new Elk::ThermostatData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ThermostatData(void * jarg1) {
  Elk::ThermostatData *arg1 = (Elk::ThermostatData *) 0 ;
  
  arg1 = (Elk::ThermostatData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_ACFail_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ACFail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_ACFail_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->ACFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_boxTamper_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->boxTamper = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_boxTamper_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->boxTamper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_communicationError_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->communicationError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_communicationError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->communicationError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_EEPROMError_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EEPROMError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_EEPROMError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->EEPROMError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_lowBattery_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lowBattery = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_lowBattery_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->lowBattery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_overCurrent_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overCurrent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_overCurrent_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->overCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_telephoneFault_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->telephoneFault = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_telephoneFault_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->telephoneFault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_output2_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->output2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_output2_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->output2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_missingKeypad_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->missingKeypad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_missingKeypad_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->missingKeypad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_zoneExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_zoneExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->zoneExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_outputExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outputExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_outputExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->outputExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_RPRemoteAccess_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RPRemoteAccess = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_RPRemoteAccess_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->RPRemoteAccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_commonAreaNotArmed_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->commonAreaNotArmed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_commonAreaNotArmed_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->commonAreaNotArmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_flashMemoryError_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->flashMemoryError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_flashMemoryError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->flashMemoryError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_securityAlert_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->securityAlert = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_securityAlert_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->securityAlert);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_serialPortExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->serialPortExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_serialPortExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->serialPortExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_lostTransmitter_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lostTransmitter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_lostTransmitter_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->lostTransmitter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_GESmokeCleanMe_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GESmokeCleanMe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_GESmokeCleanMe_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->GESmokeCleanMe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SystemTroubleStatus_ethernet_set(void * jarg1, unsigned int jarg2) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ethernet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SystemTroubleStatus_ethernet_get(void * jarg1) {
  unsigned int jresult ;
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->ethernet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SystemTroubleStatus() {
  void * jresult ;
  Elk::SystemTroubleStatus *result = 0 ;
  
  {
    try {
      result = (Elk::SystemTroubleStatus *)new Elk::SystemTroubleStatus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SystemTroubleStatus(void * jarg1) {
  Elk::SystemTroubleStatus *arg1 = (Elk::SystemTroubleStatus *) 0 ;
  
  arg1 = (Elk::SystemTroubleStatus *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatus_keypadNumber_set(void * jarg1, int jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->keypadNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeypadFkeyStatus_keypadNumber_get(void * jarg1) {
  int jresult ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  int result;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  result = (int) ((arg1)->keypadNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatus_KeyPressed_set(void * jarg1, int jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::KeyID arg2 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  arg2 = (enum Elk::KeypadFkeyStatus::KeyID)jarg2; 
  if (arg1) (arg1)->KeyPressed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_KeypadFkeyStatus_KeyPressed_get(void * jarg1) {
  int jresult ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::KeyID result;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  result = (enum Elk::KeypadFkeyStatus::KeyID) ((arg1)->KeyPressed);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatus_illumination_set(void * jarg1, void * jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::FkeyIllumination *arg2 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  arg2 = (enum Elk::KeypadFkeyStatus::FkeyIllumination *)jarg2; 
  {
    size_t ii;
    enum Elk::KeypadFkeyStatus::FkeyIllumination *b = (enum Elk::KeypadFkeyStatus::FkeyIllumination *) arg1->illumination;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((enum Elk::KeypadFkeyStatus::FkeyIllumination *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KeypadFkeyStatus_illumination_get(void * jarg1) {
  void * jresult ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  enum Elk::KeypadFkeyStatus::FkeyIllumination *result = 0 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  result = (enum Elk::KeypadFkeyStatus::FkeyIllumination *)(enum Elk::KeypadFkeyStatus::FkeyIllumination *) ((arg1)->illumination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatus_codeRequiredForBypass_set(void * jarg1, unsigned int jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->codeRequiredForBypass = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeypadFkeyStatus_codeRequiredForBypass_get(void * jarg1) {
  unsigned int jresult ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  result = (bool) ((arg1)->codeRequiredForBypass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatus_beepChimeMode_set(void * jarg1, void * jarg2) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  unsigned char *arg2 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->beepChimeMode;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KeypadFkeyStatus_beepChimeMode_get(void * jarg1) {
  void * jresult ;
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->beepChimeMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_KeypadFkeyStatus() {
  void * jresult ;
  Elk::KeypadFkeyStatus *result = 0 ;
  
  {
    try {
      result = (Elk::KeypadFkeyStatus *)new Elk::KeypadFkeyStatus();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KeypadFkeyStatus(void * jarg1) {
  Elk::KeypadFkeyStatus *arg1 = (Elk::KeypadFkeyStatus *) 0 ;
  
  arg1 = (Elk::KeypadFkeyStatus *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeAccess_codetype_set(void * jarg1, int jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  enum Elk::UserCodeAccess::CodeType arg2 ;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  arg2 = (enum Elk::UserCodeAccess::CodeType)jarg2; 
  if (arg1) (arg1)->codetype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UserCodeAccess_codetype_get(void * jarg1) {
  int jresult ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  enum Elk::UserCodeAccess::CodeType result;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  result = (enum Elk::UserCodeAccess::CodeType) ((arg1)->codetype);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeAccess_usesCelcius_set(void * jarg1, unsigned int jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->usesCelcius = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UserCodeAccess_usesCelcius_get(void * jarg1) {
  unsigned int jresult ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  bool result;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  result = (bool) ((arg1)->usesCelcius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeAccess_validAreas_set(void * jarg1, unsigned char jarg2) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->validAreas = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_UserCodeAccess_validAreas_get(void * jarg1) {
  unsigned char jresult ;
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  uint8_t result;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  result = (uint8_t) ((arg1)->validAreas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UserCodeAccess() {
  void * jresult ;
  Elk::UserCodeAccess *result = 0 ;
  
  {
    try {
      result = (Elk::UserCodeAccess *)new Elk::UserCodeAccess();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserCodeAccess(void * jarg1) {
  Elk::UserCodeAccess *arg1 = (Elk::UserCodeAccess *) 0 ;
  
  arg1 = (Elk::UserCodeAccess *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeData_area_set(void * jarg1, int jarg2) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->area = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntryExitTimeData_area_get(void * jarg1) {
  int jresult ;
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int result;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  result = (int) ((arg1)->area);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeData_timeDataType_set(void * jarg1, int jarg2) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  enum Elk::EntryExitTimeData::TimeDataType arg2 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  arg2 = (enum Elk::EntryExitTimeData::TimeDataType)jarg2; 
  if (arg1) (arg1)->timeDataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntryExitTimeData_timeDataType_get(void * jarg1) {
  int jresult ;
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  enum Elk::EntryExitTimeData::TimeDataType result;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  result = (enum Elk::EntryExitTimeData::TimeDataType) ((arg1)->timeDataType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeData_timer1_set(void * jarg1, int jarg2) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timer1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntryExitTimeData_timer1_get(void * jarg1) {
  int jresult ;
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int result;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  result = (int) ((arg1)->timer1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeData_timer2_set(void * jarg1, int jarg2) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->timer2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntryExitTimeData_timer2_get(void * jarg1) {
  int jresult ;
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  int result;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  result = (int) ((arg1)->timer2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeData_armState_set(void * jarg1, int jarg2) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  Elk::ArmMode arg2 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  arg2 = (Elk::ArmMode)jarg2; 
  if (arg1) (arg1)->armState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EntryExitTimeData_armState_get(void * jarg1) {
  int jresult ;
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  Elk::ArmMode result;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  result = (Elk::ArmMode) ((arg1)->armState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EntryExitTimeData() {
  void * jresult ;
  Elk::EntryExitTimeData *result = 0 ;
  
  {
    try {
      result = (Elk::EntryExitTimeData *)new Elk::EntryExitTimeData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EntryExitTimeData(void * jarg1) {
  Elk::EntryExitTimeData *arg1 = (Elk::EntryExitTimeData *) 0 ;
  
  arg1 = (Elk::EntryExitTimeData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeValidation_userCodeData_set(void * jarg1, int jarg2) {
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->userCodeData = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UserCodeValidation_userCodeData_get(void * jarg1) {
  int jresult ;
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int result;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  result = (int) ((arg1)->userCodeData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeValidation_userNumber_set(void * jarg1, int jarg2) {
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->userNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UserCodeValidation_userNumber_get(void * jarg1) {
  int jresult ;
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int result;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  result = (int) ((arg1)->userNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeValidation_keypadNumber_set(void * jarg1, int jarg2) {
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->keypadNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UserCodeValidation_keypadNumber_get(void * jarg1) {
  int jresult ;
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  int result;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  result = (int) ((arg1)->keypadNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UserCodeValidation() {
  void * jresult ;
  Elk::UserCodeValidation *result = 0 ;
  
  {
    try {
      result = (Elk::UserCodeValidation *)new Elk::UserCodeValidation();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserCodeValidation(void * jarg1) {
  Elk::UserCodeValidation *arg1 = (Elk::UserCodeValidation *) 0 ;
  
  arg1 = (Elk::UserCodeValidation *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightingData_houseCode_set(void * jarg1, char jarg2) {
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  char arg2 ;
  
  arg1 = (Elk::LightingData *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->houseCode = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_LightingData_houseCode_get(void * jarg1) {
  char jresult ;
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  char result;
  
  arg1 = (Elk::LightingData *)jarg1; 
  result = (char) ((arg1)->houseCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightingData_unitCode_set(void * jarg1, int jarg2) {
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::LightingData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->unitCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LightingData_unitCode_get(void * jarg1) {
  int jresult ;
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  int result;
  
  arg1 = (Elk::LightingData *)jarg1; 
  result = (int) ((arg1)->unitCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightingData_lightLevel_set(void * jarg1, double jarg2) {
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  double arg2 ;
  
  arg1 = (Elk::LightingData *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->lightLevel = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_LightingData_lightLevel_get(void * jarg1) {
  double jresult ;
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  double result;
  
  arg1 = (Elk::LightingData *)jarg1; 
  result = (double) ((arg1)->lightLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LightingData() {
  void * jresult ;
  Elk::LightingData *result = 0 ;
  
  {
    try {
      result = (Elk::LightingData *)new Elk::LightingData();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LightingData(void * jarg1) {
  Elk::LightingData *arg1 = (Elk::LightingData *) 0 ;
  
  arg1 = (Elk::LightingData *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_X10Data_houseCode_set(void * jarg1, char jarg2) {
  Elk::X10Data *arg1 = (Elk::X10Data *) 0 ;
  char arg2 ;
  
  arg1 = (Elk::X10Data *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->houseCode = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_X10Data_houseCode_get(void * jarg1) {
  char jresult ;
  Elk::X10Data *arg1 = (Elk::X10Data *) 0 ;
  char result;
  
  arg1 = (Elk::X10Data *)jarg1; 
  result = (char) ((arg1)->houseCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_X10Data_x10_set(void * jarg1, int jarg2) {
  Elk::X10Data *arg1 = (Elk::X10Data *) 0 ;
  enum Elk::X10Data::X10 arg2 ;
  
  arg1 = (Elk::X10Data *)jarg1; 
  arg2 = (enum Elk::X10Data::X10)jarg2; 
  if (arg1) (arg1)->x10 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_X10Data_x10_get(void * jarg1) {
  int jresult ;
  Elk::X10Data *arg1 = (Elk::X10Data *) 0 ;
  enum Elk::X10Data::X10 result;
  
  arg1 = (Elk::X10Data *)jarg1; 
  result = (enum Elk::X10Data::X10) ((arg1)->x10);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_X10Data() {
  void * jresult ;
  Elk::X10Data *result = 0 ;
  
  {
    try {
      result = (Elk::X10Data *)new Elk::X10Data();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_X10Data(void * jarg1) {
  Elk::X10Data *arg1 = (Elk::X10Data *) 0 ;
  
  arg1 = (Elk::X10Data *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolCallback_run(void * jarg1, unsigned int jarg2) {
  BoolCallback *arg1 = (BoolCallback *) 0 ;
  bool arg2 ;
  std::shared_ptr< BoolCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  BoolCallback > *)jarg1;
  arg1 = (BoolCallback *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoolCallback(void * jarg1) {
  BoolCallback *arg1 = (BoolCallback *) 0 ;
  std::shared_ptr< BoolCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  BoolCallback > *)jarg1;
  arg1 = (BoolCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BoolCallback() {
  void * jresult ;
  BoolCallback *result = 0 ;
  
  {
    try {
      result = (BoolCallback *)new SwigDirector_BoolCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  BoolCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolCallback_director_connect(void *objarg, SwigDirector_BoolCallback::SWIG_Callback0_t callback0) {
  std::shared_ptr< BoolCallback > *obj = (std::shared_ptr< BoolCallback > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_BoolCallback *director = dynamic_cast<SwigDirector_BoolCallback *>(obj->operator->());
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCallback_run(void * jarg1, int jarg2) {
  IntCallback *arg1 = (IntCallback *) 0 ;
  int arg2 ;
  
  arg1 = (IntCallback *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntCallback(void * jarg1) {
  IntCallback *arg1 = (IntCallback *) 0 ;
  
  arg1 = (IntCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntCallback() {
  void * jresult ;
  IntCallback *result = 0 ;
  
  {
    try {
      result = (IntCallback *)new SwigDirector_IntCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntCallback_director_connect(void *objarg, SwigDirector_IntCallback::SWIG_Callback0_t callback0) {
  IntCallback *obj = (IntCallback *)objarg;
  SwigDirector_IntCallback *director = dynamic_cast<SwigDirector_IntCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVectorCallback_run(void * jarg1, void * jarg2) {
  ArmStatusVectorCallback *arg1 = (ArmStatusVectorCallback *) 0 ;
  std::vector< Elk::ArmStatus > arg2 ;
  std::shared_ptr< ArmStatusVectorCallback > *smartarg1 = 0 ;
  std::vector< Elk::ArmStatus > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  ArmStatusVectorCallback > *)jarg1;
  arg1 = (ArmStatusVectorCallback *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::vector< Elk::ArmStatus > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< Elk::ArmStatus >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArmStatusVectorCallback(void * jarg1) {
  ArmStatusVectorCallback *arg1 = (ArmStatusVectorCallback *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  ArmStatusVectorCallback > *)jarg1;
  arg1 = (ArmStatusVectorCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmStatusVectorCallback() {
  void * jresult ;
  ArmStatusVectorCallback *result = 0 ;
  
  {
    try {
      result = (ArmStatusVectorCallback *)new SwigDirector_ArmStatusVectorCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  ArmStatusVectorCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmStatusVectorCallback_director_connect(void *objarg, SwigDirector_ArmStatusVectorCallback::SWIG_Callback0_t callback0) {
  std::shared_ptr< ArmStatusVectorCallback > *obj = (std::shared_ptr< ArmStatusVectorCallback > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_ArmStatusVectorCallback *director = dynamic_cast<SwigDirector_ArmStatusVectorCallback *>(obj->operator->());
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_BoolVectorCallback_run(void * jarg1, void * jarg2) {
  BoolVectorCallback *arg1 = (BoolVectorCallback *) 0 ;
  std::vector< bool > arg2 ;
  std::vector< bool > *argp2 ;
  
  arg1 = (BoolVectorCallback *)jarg1; 
  argp2 = (std::vector< bool > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< bool >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BoolVectorCallback(void * jarg1) {
  BoolVectorCallback *arg1 = (BoolVectorCallback *) 0 ;
  
  arg1 = (BoolVectorCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypadFkeyStatusCallback_run(void * jarg1, void * jarg2) {
  KeypadFkeyStatusCallback *arg1 = (KeypadFkeyStatusCallback *) 0 ;
  Elk::KeypadFkeyStatus arg2 ;
  Elk::KeypadFkeyStatus *argp2 ;
  
  arg1 = (KeypadFkeyStatusCallback *)jarg1; 
  argp2 = (Elk::KeypadFkeyStatus *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::KeypadFkeyStatus", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_KeypadFkeyStatusCallback(void * jarg1) {
  KeypadFkeyStatusCallback *arg1 = (KeypadFkeyStatusCallback *) 0 ;
  
  arg1 = (KeypadFkeyStatusCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EntryExitTimeDataCallback_run(void * jarg1, void * jarg2) {
  EntryExitTimeDataCallback *arg1 = (EntryExitTimeDataCallback *) 0 ;
  Elk::EntryExitTimeData arg2 ;
  Elk::EntryExitTimeData *argp2 ;
  
  arg1 = (EntryExitTimeDataCallback *)jarg1; 
  argp2 = (Elk::EntryExitTimeData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::EntryExitTimeData", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EntryExitTimeDataCallback(void * jarg1) {
  EntryExitTimeDataCallback *arg1 = (EntryExitTimeDataCallback *) 0 ;
  
  arg1 = (EntryExitTimeDataCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCodeValidationCallback_run(void * jarg1, void * jarg2) {
  UserCodeValidationCallback *arg1 = (UserCodeValidationCallback *) 0 ;
  Elk::UserCodeValidation arg2 ;
  Elk::UserCodeValidation *argp2 ;
  
  arg1 = (UserCodeValidationCallback *)jarg1; 
  argp2 = (Elk::UserCodeValidation *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::UserCodeValidation", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UserCodeValidationCallback(void * jarg1) {
  UserCodeValidationCallback *arg1 = (UserCodeValidationCallback *) 0 ;
  
  arg1 = (UserCodeValidationCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogDataUpdateCallback_run(void * jarg1, void * jarg2) {
  LogDataUpdateCallback *arg1 = (LogDataUpdateCallback *) 0 ;
  Elk::LogEntry arg2 ;
  Elk::LogEntry *argp2 ;
  
  arg1 = (LogDataUpdateCallback *)jarg1; 
  argp2 = (Elk::LogEntry *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::LogEntry", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogDataUpdateCallback(void * jarg1) {
  LogDataUpdateCallback *arg1 = (LogDataUpdateCallback *) 0 ;
  
  arg1 = (LogDataUpdateCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LightingDataCallback_run(void * jarg1, void * jarg2) {
  LightingDataCallback *arg1 = (LightingDataCallback *) 0 ;
  Elk::LightingData arg2 ;
  Elk::LightingData *argp2 ;
  
  arg1 = (LightingDataCallback *)jarg1; 
  argp2 = (Elk::LightingData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::LightingData", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LightingDataCallback(void * jarg1) {
  LightingDataCallback *arg1 = (LightingDataCallback *) 0 ;
  
  arg1 = (LightingDataCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_X10DataCallback_run(void * jarg1, void * jarg2) {
  X10DataCallback *arg1 = (X10DataCallback *) 0 ;
  Elk::X10Data arg2 ;
  Elk::X10Data *argp2 ;
  
  arg1 = (X10DataCallback *)jarg1; 
  argp2 = (Elk::X10Data *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::X10Data", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_X10DataCallback(void * jarg1) {
  X10DataCallback *arg1 = (X10DataCallback *) 0 ;
  
  arg1 = (X10DataCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringCallback_run(void * jarg1, char * jarg2) {
  StringCallback *arg1 = (StringCallback *) 0 ;
  std::string arg2 ;
  std::shared_ptr< StringCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  StringCallback > *)jarg1;
  arg1 = (StringCallback *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  (arg1)->run(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringCallback(void * jarg1) {
  StringCallback *arg1 = (StringCallback *) 0 ;
  std::shared_ptr< StringCallback > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  StringCallback > *)jarg1;
  arg1 = (StringCallback *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringCallback() {
  void * jresult ;
  StringCallback *result = 0 ;
  
  {
    try {
      result = (StringCallback *)new SwigDirector_StringCallback();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  StringCallback >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringCallback_director_connect(void *objarg, SwigDirector_StringCallback::SWIG_Callback0_t callback0) {
  std::shared_ptr< StringCallback > *obj = (std::shared_ptr< StringCallback > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_StringCallback *director = dynamic_cast<SwigDirector_StringCallback *>(obj->operator->());
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onRPConnection_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolCallback > *arg2 = 0 ;
  std::shared_ptr< BoolCallback > tempnull2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< BoolCallback > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->onRPConnection = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onRPConnection_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< BoolCallback > *) & ((arg1)->onRPConnection);
  jresult = *result ? new std::shared_ptr< BoolCallback >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onArmStatusChange_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *arg2 = 0 ;
  std::shared_ptr< ArmStatusVectorCallback > tempnull2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< ArmStatusVectorCallback > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->onArmStatusChange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onArmStatusChange_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< ArmStatusVectorCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< ArmStatusVectorCallback > *) & ((arg1)->onArmStatusChange);
  jresult = *result ? new std::shared_ptr< ArmStatusVectorCallback >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onDebugOutput_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< StringCallback > *arg2 = 0 ;
  std::shared_ptr< StringCallback > tempnull2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< StringCallback > *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->onDebugOutput = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onDebugOutput_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< StringCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< StringCallback > *) & ((arg1)->onDebugOutput);
  jresult = *result ? new std::shared_ptr< StringCallback >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onKeypadFkeyStatusChange_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< KeypadFkeyStatusCallback > *arg2 = (std::shared_ptr< KeypadFkeyStatusCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< KeypadFkeyStatusCallback > *)jarg2; 
  if (arg1) (arg1)->onKeypadFkeyStatusChange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onKeypadFkeyStatusChange_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< KeypadFkeyStatusCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< KeypadFkeyStatusCallback > *)& ((arg1)->onKeypadFkeyStatusChange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onOutputStatusChange_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolVectorCallback > *arg2 = (std::shared_ptr< BoolVectorCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< BoolVectorCallback > *)jarg2; 
  if (arg1) (arg1)->onOutputStatusChange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onOutputStatusChange_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< BoolVectorCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< BoolVectorCallback > *)& ((arg1)->onOutputStatusChange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onEntryExitTimerChange_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< EntryExitTimeDataCallback > *arg2 = (std::shared_ptr< EntryExitTimeDataCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< EntryExitTimeDataCallback > *)jarg2; 
  if (arg1) (arg1)->onEntryExitTimerChange = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onEntryExitTimerChange_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< EntryExitTimeDataCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< EntryExitTimeDataCallback > *)& ((arg1)->onEntryExitTimerChange);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onUserCodeValidation_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< UserCodeValidationCallback > *arg2 = (std::shared_ptr< UserCodeValidationCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< UserCodeValidationCallback > *)jarg2; 
  if (arg1) (arg1)->onUserCodeValidation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onUserCodeValidation_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< UserCodeValidationCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< UserCodeValidationCallback > *)& ((arg1)->onUserCodeValidation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onLogDataUpdate_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< LogDataUpdateCallback > *arg2 = (std::shared_ptr< LogDataUpdateCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< LogDataUpdateCallback > *)jarg2; 
  if (arg1) (arg1)->onLogDataUpdate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onLogDataUpdate_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< LogDataUpdateCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< LogDataUpdateCallback > *)& ((arg1)->onLogDataUpdate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onLightingDataUpdate_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< LightingDataCallback > *arg2 = (std::shared_ptr< LightingDataCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< LightingDataCallback > *)jarg2; 
  if (arg1) (arg1)->onLightingDataUpdate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onLightingDataUpdate_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< LightingDataCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< LightingDataCallback > *)& ((arg1)->onLightingDataUpdate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onX10DataUpdate_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< X10DataCallback > *arg2 = (std::shared_ptr< X10DataCallback > *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (std::shared_ptr< X10DataCallback > *)jarg2; 
  if (arg1) (arg1)->onX10DataUpdate = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onX10DataUpdate_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::shared_ptr< X10DataCallback > *result = 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (std::shared_ptr< X10DataCallback > *)& ((arg1)->onX10DataUpdate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getConfiguredZones(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getConfiguredZones();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getConfiguredKeypads(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getConfiguredKeypads();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getConfiguredTempDevices(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< std::pair< int,Elk::TemperatureDevice > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getConfiguredTempDevices();
  jresult = new std::vector< std::pair< int,Elk::TemperatureDevice > >((const std::vector< std::pair< int,Elk::TemperatureDevice > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_armDisarm(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::ArmMode arg3 ;
  std::string arg4 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::ArmMode)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->armDisarm(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getArmStatus(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::ArmStatus > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getArmStatus();
  jresult = new std::vector< Elk::ArmStatus >((const std::vector< Elk::ArmStatus > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneAlarms(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::SZoneDefinition > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneAlarms();
  jresult = new std::vector< Elk::SZoneDefinition >((const std::vector< Elk::SZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getAudioData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::AudioData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getAudioData(arg2);
  jresult = new Elk::AudioData((const Elk::AudioData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_enableControlOutput(void * jarg1, int jarg2, unsigned short jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->enableControlOutput(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_disableControlOutput(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->disableControlOutput(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_toggleControlOutput(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->toggleControlOutput(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getControlOutputs(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< bool > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getControlOutputs();
  jresult = new std::vector< bool >((const std::vector< bool > &)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_getCustomValue(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCustomValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getCustomValues(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< uint16_t > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getCustomValues();
  jresult = new std::vector< uint16_t >((const std::vector< uint16_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setCustomValue(void * jarg1, int jarg2, unsigned short jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->setCustomValue(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_requestChangeUserCode(void * jarg1, int jarg2, char * jarg3, char * jarg4, unsigned char jarg5) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  uint8_t arg5 ;
  Elk::UserCodeSuccess result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  arg5 = (uint8_t)jarg5; 
  result = (Elk::UserCodeSuccess)(arg1)->requestChangeUserCode(arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_getCounterValue(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCounterValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_setCounterValue(void * jarg1, int jarg2, unsigned short jarg3) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint16_t)(arg1)->setCounterValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_displayLCDText__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_displayLCDText__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6, char * jarg7) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_getLightingStatus(void * jarg1, int jarg2) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getLightingStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getKeypadAreas(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getKeypadAreas();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getKeypadFkeyStatus(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::KeypadFkeyStatus result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getKeypadFkeyStatus(arg2);
  jresult = new Elk::KeypadFkeyStatus((const Elk::KeypadFkeyStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_pressFunctionKey(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::FKEY arg3 ;
  std::vector< Elk::SChimeMode > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::FKEY)jarg3; 
  result = (arg1)->pressFunctionKey(arg2,arg3);
  jresult = new std::vector< Elk::SChimeMode >((const std::vector< Elk::SChimeMode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getLogData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::LogEntry result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getLogData(arg2);
  jresult = new Elk::LogEntry((const Elk::LogEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getLogs(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::LogEntry > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getLogs();
  jresult = new std::vector< Elk::LogEntry >((const std::vector< Elk::LogEntry > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setLogData(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLogData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_executePLCCommand(void * jarg1, char jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->executePLCCommand(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setPLCState(void * jarg1, char jarg2, int jarg3, unsigned int jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setPLCState(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_togglePLCState(void * jarg1, char jarg2, int jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->togglePLCState(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getPLCStatus(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getPLCStatus(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getRTCData(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::RTCData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getRTCData();
  jresult = new Elk::RTCData((const Elk::RTCData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_setRTCData(void * jarg1, void * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::RTCData arg2 ;
  Elk::RTCData *argp2 ;
  Elk::RTCData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (Elk::RTCData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::RTCData", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->setRTCData(arg2);
  jresult = new Elk::RTCData((const Elk::RTCData &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_M1API_getTextDescription(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TextDescriptionType arg2 ;
  int arg3 ;
  std::string result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::TextDescriptionType)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->getTextDescription(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getSystemTroubleStatus(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SystemTroubleStatus result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getSystemTroubleStatus();
  jresult = new Elk::SystemTroubleStatus((const Elk::SystemTroubleStatus &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_getTemperature(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TemperatureDevice arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTemperature(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getTemperatures(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::TemperatureDevice arg2 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::TemperatureDevice)jarg2; 
  result = (arg1)->getTemperatures(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_speakWord(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenWord arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::SirenWord)jarg2; 
  (arg1)->speakWord(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_speakPhrase(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenPhrase arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::SirenPhrase)jarg2; 
  (arg1)->speakPhrase(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getOmnistat2Data(void * jarg1, void * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  std::vector< char > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->getOmnistat2Data(arg2);
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_activateTask(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->activateTask(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getThermostatData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::ThermostatData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getThermostatData(arg2);
  jresult = new Elk::ThermostatData((const Elk::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_setThermostatData(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Elk::ThermostatData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->setThermostatData(arg2,arg3,arg4);
  jresult = new Elk::ThermostatData((const Elk::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getUserCodeAccess(void * jarg1, char * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::string arg2 ;
  Elk::UserCodeAccess result;
  
  arg1 = (Elk::M1API *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->getUserCodeAccess(arg2);
  jresult = new Elk::UserCodeAccess((const Elk::UserCodeAccess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getM1VersionNumber(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getM1VersionNumber();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_zoneBypass(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->zoneBypass(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_setAreaBypass(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setAreaBypass(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneDefinitions(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::SZoneDefinition > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneDefinitions();
  jresult = new std::vector< Elk::SZoneDefinition >((const std::vector< Elk::SZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZonePartitions(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZonePartitions();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneStatuses(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< Elk::ZoneState > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneStatuses();
  jresult = new std::vector< Elk::ZoneState >((const std::vector< Elk::ZoneState > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_M1API_getZoneVoltage(void * jarg1, int jarg2) {
  float jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getZoneVoltage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API(void * jarg1) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1Monitor(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Monitor_run(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Monitor_stop(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1AsciiAPI(void * jarg1) {
  void * jresult ;
  std::shared_ptr< Elk::M1Connection > arg1 ;
  Elk::M1AsciiAPI *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< Elk::M1Connection > *)jarg1; 
  result = (Elk::M1AsciiAPI *)new Elk::M1AsciiAPI(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_collectNames(void * jarg1, int jarg2) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  Elk::TextDescriptionType arg2 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (Elk::TextDescriptionType)jarg2; 
  (arg1)->collectNames(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1AsciiAPI_getConfiguredAreas(void * jarg1) {
  void * jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  result = (arg1)->getConfiguredAreas();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_displayLCDText__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_displayLCDText__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6, char * jarg7) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1AsciiAPI(void * jarg1) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1Connection(void * jarg1) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1Connection_Connect(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Connect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Connection_Disconnect(void * jarg1) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Disconnect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Connection_Send(void * jarg1, void * jarg2) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::vector< char > arg2 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Send(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1Connection_Recieve(void * jarg1) {
  void * jresult ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->Recieve();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1Connection() {
  void * jresult ;
  Elk::M1Connection *result = 0 ;
  
  {
    try {
      result = (Elk::M1Connection *)new SwigDirector_M1Connection();
    } catch (const std::exception& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new std::shared_ptr<  Elk::M1Connection >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Connection_director_connect(void *objarg, SwigDirector_M1Connection::SWIG_Callback0_t callback0, SwigDirector_M1Connection::SWIG_Callback1_t callback1, SwigDirector_M1Connection::SWIG_Callback2_t callback2, SwigDirector_M1Connection::SWIG_Callback3_t callback3) {
  std::shared_ptr< Elk::M1Connection > *obj = (std::shared_ptr< Elk::M1Connection > *)objarg;
  // Keep a local instance of the smart pointer around while we are using the raw pointer
  // Avoids using smart pointer specific API.
  SwigDirector_M1Connection *director = dynamic_cast<SwigDirector_M1Connection *>(obj->operator->());
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_C1M1Tunnel(void * jarg1) {
  void * jresult ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  Elk::C1M1Tunnel *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Elk::C1M1Tunnel *)new SwigDirector_C1M1Tunnel(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_C1M1Tunnel(void * jarg1) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_C1M1Tunnel_Authenticate(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  Elk::NetworkType result;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (Elk::NetworkType)(arg1)->Authenticate(arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C1M1Tunnel_Connect(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Connect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_C1M1Tunnel_ConnectSwigExplicitC1M1Tunnel(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::string arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Elk::C1M1Tunnel::Connect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C1M1Tunnel_Disconnect(void * jarg1) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  (arg1)->Disconnect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_C1M1Tunnel_DisconnectSwigExplicitC1M1Tunnel(void * jarg1) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  (arg1)->Elk::C1M1Tunnel::Disconnect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_C1M1Tunnel_Send(void * jarg1, void * jarg2) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Send(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_C1M1Tunnel_SendSwigExplicitC1M1Tunnel(void * jarg1, void * jarg2) {
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Elk::C1M1Tunnel::Send(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C1M1Tunnel_Recieve(void * jarg1) {
  void * jresult ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > result;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  result = (arg1)->Recieve();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C1M1Tunnel_RecieveSwigExplicitC1M1Tunnel(void * jarg1) {
  void * jresult ;
  Elk::C1M1Tunnel *arg1 = (Elk::C1M1Tunnel *) 0 ;
  std::vector< char > result;
  
  arg1 = (Elk::C1M1Tunnel *)jarg1; 
  result = (arg1)->Elk::C1M1Tunnel::Recieve();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_C1M1Tunnel_director_connect(void *objarg, SwigDirector_C1M1Tunnel::SWIG_Callback0_t callback0, SwigDirector_C1M1Tunnel::SWIG_Callback1_t callback1, SwigDirector_C1M1Tunnel::SWIG_Callback2_t callback2, SwigDirector_C1M1Tunnel::SWIG_Callback3_t callback3) {
  Elk::C1M1Tunnel *obj = (Elk::C1M1Tunnel *)objarg;
  SwigDirector_C1M1Tunnel *director = dynamic_cast<SwigDirector_C1M1Tunnel *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT Elk::M1API * SWIGSTDCALL CSharp_M1Monitor_SWIGUpcast(Elk::M1Monitor *jarg1) {
    return (Elk::M1API *)jarg1;
}

SWIGEXPORT Elk::M1Monitor * SWIGSTDCALL CSharp_M1AsciiAPI_SWIGUpcast(Elk::M1AsciiAPI *jarg1) {
    return (Elk::M1Monitor *)jarg1;
}

#ifdef __cplusplus
}
#endif

