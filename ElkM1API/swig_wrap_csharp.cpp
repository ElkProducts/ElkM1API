/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_ElkM1API(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_ElkM1API(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_ElkM1API(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "ElkM1API.h"
#include "ElkM1Monitor.h"
#include "ElkM1AsciiAPI.h"
#include "ElkM1Connection.h"
#include "ElkM1SirenWords.h"


#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ArmStatus_mode_set(void * jarg1, int jarg2) {
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::ArmMode arg2 ;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  arg2 = (Elk::M1API::ArmMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ArmStatus_mode_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::ArmMode result;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  result = (Elk::M1API::ArmMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ArmStatus_isReady_set(void * jarg1, int jarg2) {
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::ArmUpMode arg2 ;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  arg2 = (Elk::M1API::ArmUpMode)jarg2; 
  if (arg1) (arg1)->isReady = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ArmStatus_isReady_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::ArmUpMode result;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  result = (Elk::M1API::ArmUpMode) ((arg1)->isReady);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ArmStatus_alarm_set(void * jarg1, int jarg2) {
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::AlarmState arg2 ;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  arg2 = (Elk::M1API::AlarmState)jarg2; 
  if (arg1) (arg1)->alarm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ArmStatus_alarm_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  Elk::M1API::AlarmState result;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  result = (Elk::M1API::AlarmState) ((arg1)->alarm);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_ArmStatus() {
  void * jresult ;
  Elk::M1API::ArmStatus *result = 0 ;
  
  result = (Elk::M1API::ArmStatus *)new Elk::M1API::ArmStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_ArmStatus(void * jarg1) {
  Elk::M1API::ArmStatus *arg1 = (Elk::M1API::ArmStatus *) 0 ;
  
  arg1 = (Elk::M1API::ArmStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_zoneIsOn_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneIsOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_AudioData_zoneIsOn_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (bool) ((arg1)->zoneIsOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_loudness_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->loudness = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_AudioData_loudness_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (bool) ((arg1)->loudness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_doNotDisturb_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->doNotDisturb = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_AudioData_doNotDisturb_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (bool) ((arg1)->doNotDisturb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_source_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->source = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_source_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (int) ((arg1)->source);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_volume_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_volume_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (int) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_bass_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_bass_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (int) ((arg1)->bass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_treble_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->treble = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_treble_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (int) ((arg1)->treble);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_balance_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_balance_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (int) ((arg1)->balance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_AudioData_partyMode_set(void * jarg1, int jarg2) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  enum Elk::M1API::AudioData::PartyMode arg2 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  arg2 = (enum Elk::M1API::AudioData::PartyMode)jarg2; 
  if (arg1) (arg1)->partyMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_AudioData_partyMode_get(void * jarg1) {
  int jresult ;
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  enum Elk::M1API::AudioData::PartyMode result;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  result = (enum Elk::M1API::AudioData::PartyMode) ((arg1)->partyMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_AudioData() {
  void * jresult ;
  Elk::M1API::AudioData *result = 0 ;
  
  result = (Elk::M1API::AudioData *)new Elk::M1API::AudioData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_AudioData(void * jarg1) {
  Elk::M1API::AudioData *arg1 = (Elk::M1API::AudioData *) 0 ;
  
  arg1 = (Elk::M1API::AudioData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry__event_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry__event_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->event);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_eventSubjectNumber_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eventSubjectNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_eventSubjectNumber_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->eventSubjectNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_area_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->area = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_area_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->area);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_hour_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hour = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_hour_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_minute_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minute = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_minute_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_month_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_month_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_day_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_day_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_index_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_index_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_year_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_year_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_LogEntry_dayOfWeek_set(void * jarg1, int jarg2) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  Elk::M1API::Weekday arg2 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  arg2 = (Elk::M1API::Weekday)jarg2; 
  if (arg1) (arg1)->dayOfWeek = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_LogEntry_dayOfWeek_get(void * jarg1) {
  int jresult ;
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  Elk::M1API::Weekday result;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  result = (Elk::M1API::Weekday) ((arg1)->dayOfWeek);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_LogEntry() {
  void * jresult ;
  Elk::M1API::LogEntry *result = 0 ;
  
  result = (Elk::M1API::LogEntry *)new Elk::M1API::LogEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_LogEntry(void * jarg1) {
  Elk::M1API::LogEntry *arg1 = (Elk::M1API::LogEntry *) 0 ;
  
  arg1 = (Elk::M1API::LogEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ZoneState_physicalState_set(void * jarg1, int jarg2) {
  Elk::M1API::ZoneState *arg1 = (Elk::M1API::ZoneState *) 0 ;
  Elk::M1API::PhysicalZoneState arg2 ;
  
  arg1 = (Elk::M1API::ZoneState *)jarg1; 
  arg2 = (Elk::M1API::PhysicalZoneState)jarg2; 
  if (arg1) (arg1)->physicalState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ZoneState_physicalState_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ZoneState *arg1 = (Elk::M1API::ZoneState *) 0 ;
  Elk::M1API::PhysicalZoneState result;
  
  arg1 = (Elk::M1API::ZoneState *)jarg1; 
  result = (Elk::M1API::PhysicalZoneState) ((arg1)->physicalState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ZoneState_logicalState_set(void * jarg1, int jarg2) {
  Elk::M1API::ZoneState *arg1 = (Elk::M1API::ZoneState *) 0 ;
  Elk::M1API::LogicalZoneState arg2 ;
  
  arg1 = (Elk::M1API::ZoneState *)jarg1; 
  arg2 = (Elk::M1API::LogicalZoneState)jarg2; 
  if (arg1) (arg1)->logicalState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ZoneState_logicalState_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ZoneState *arg1 = (Elk::M1API::ZoneState *) 0 ;
  Elk::M1API::LogicalZoneState result;
  
  arg1 = (Elk::M1API::ZoneState *)jarg1; 
  result = (Elk::M1API::LogicalZoneState) ((arg1)->logicalState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_ZoneState() {
  void * jresult ;
  Elk::M1API::ZoneState *result = 0 ;
  
  result = (Elk::M1API::ZoneState *)new Elk::M1API::ZoneState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_ZoneState(void * jarg1) {
  Elk::M1API::ZoneState *arg1 = (Elk::M1API::ZoneState *) 0 ;
  
  arg1 = (Elk::M1API::ZoneState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_seconds_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->seconds = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_seconds_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->seconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_minutes_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minutes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_minutes_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->minutes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_hours_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->hours = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_hours_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->hours);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_weekday_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  Elk::M1API::Weekday arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (Elk::M1API::Weekday)jarg2; 
  if (arg1) (arg1)->weekday = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_weekday_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  Elk::M1API::Weekday result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (Elk::M1API::Weekday) ((arg1)->weekday);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_day_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->day = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_day_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_month_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->month = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_month_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_year_set(void * jarg1, int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_RTCData_year_get(void * jarg1) {
  int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (int) ((arg1)->year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_twelveHourClock_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->twelveHourClock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_RTCData_twelveHourClock_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (bool) ((arg1)->twelveHourClock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_RTCData_dayBeforeMonth_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dayBeforeMonth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_RTCData_dayBeforeMonth_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  result = (bool) ((arg1)->dayBeforeMonth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_RTCData() {
  void * jresult ;
  Elk::M1API::RTCData *result = 0 ;
  
  result = (Elk::M1API::RTCData *)new Elk::M1API::RTCData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_RTCData(void * jarg1) {
  Elk::M1API::RTCData *arg1 = (Elk::M1API::RTCData *) 0 ;
  
  arg1 = (Elk::M1API::RTCData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_mode_set(void * jarg1, int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  enum Elk::M1API::ThermostatData::ThermostatMode arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = (enum Elk::M1API::ThermostatData::ThermostatMode)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ThermostatData_mode_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  enum Elk::M1API::ThermostatData::ThermostatMode result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (enum Elk::M1API::ThermostatData::ThermostatMode) ((arg1)->mode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_holdCurrentTemperature_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->holdCurrentTemperature = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_ThermostatData_holdCurrentTemperature_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (bool) ((arg1)->holdCurrentTemperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_fanOn_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fanOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_ThermostatData_fanOn_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (bool) ((arg1)->fanOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_temperature_set(void * jarg1, int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temperature = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ThermostatData_temperature_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (int) ((arg1)->temperature);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_heatSetPoint_set(void * jarg1, int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heatSetPoint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ThermostatData_heatSetPoint_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (int) ((arg1)->heatSetPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_coolSetPoint_set(void * jarg1, int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->coolSetPoint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ThermostatData_coolSetPoint_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (int) ((arg1)->coolSetPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_ThermostatData_humidity_set(void * jarg1, int jarg2) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->humidity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_ThermostatData_humidity_get(void * jarg1) {
  int jresult ;
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  int result;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  result = (int) ((arg1)->humidity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_ThermostatData() {
  void * jresult ;
  Elk::M1API::ThermostatData *result = 0 ;
  
  result = (Elk::M1API::ThermostatData *)new Elk::M1API::ThermostatData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_ThermostatData(void * jarg1) {
  Elk::M1API::ThermostatData *arg1 = (Elk::M1API::ThermostatData *) 0 ;
  
  arg1 = (Elk::M1API::ThermostatData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_ACFail_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ACFail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_ACFail_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->ACFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_boxTamper_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->boxTamper = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_boxTamper_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->boxTamper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_communicationError_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->communicationError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_communicationError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->communicationError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_EEPROMError_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EEPROMError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_EEPROMError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->EEPROMError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_lowBattery_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lowBattery = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_lowBattery_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->lowBattery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_overCurrent_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->overCurrent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_overCurrent_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->overCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_telephoneFault_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->telephoneFault = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_telephoneFault_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->telephoneFault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_output2_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->output2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_output2_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->output2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_missingKeypad_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->missingKeypad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_missingKeypad_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->missingKeypad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_zoneExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->zoneExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_zoneExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->zoneExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_outputExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->outputExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_outputExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->outputExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_RPRemoteAccess_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RPRemoteAccess = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_RPRemoteAccess_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->RPRemoteAccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_commonAreaNotArmed_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->commonAreaNotArmed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_commonAreaNotArmed_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->commonAreaNotArmed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_flashMemoryError_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->flashMemoryError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_flashMemoryError_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->flashMemoryError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_securityAlert_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->securityAlert = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_securityAlert_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->securityAlert);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_serialPortExpander_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->serialPortExpander = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_serialPortExpander_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->serialPortExpander);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_lostTransmitter_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lostTransmitter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_lostTransmitter_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->lostTransmitter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_GESmokeCleanMe_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GESmokeCleanMe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_GESmokeCleanMe_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->GESmokeCleanMe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_ethernet_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ethernet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_SystemTroubleStatus_ethernet_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  result = (bool) ((arg1)->ethernet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_SystemTroubleStatus() {
  void * jresult ;
  Elk::M1API::SystemTroubleStatus *result = 0 ;
  
  result = (Elk::M1API::SystemTroubleStatus *)new Elk::M1API::SystemTroubleStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_SystemTroubleStatus(void * jarg1) {
  Elk::M1API::SystemTroubleStatus *arg1 = (Elk::M1API::SystemTroubleStatus *) 0 ;
  
  arg1 = (Elk::M1API::SystemTroubleStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_KeypadFkeyStatus_illumination_set(void * jarg1, void * jarg2) {
  Elk::M1API::KeypadFkeyStatus *arg1 = (Elk::M1API::KeypadFkeyStatus *) 0 ;
  enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *arg2 ;
  
  arg1 = (Elk::M1API::KeypadFkeyStatus *)jarg1; 
  arg2 = (enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *)jarg2; 
  {
    size_t ii;
    enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *b = (enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *) arg1->illumination;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_KeypadFkeyStatus_illumination_get(void * jarg1) {
  void * jresult ;
  Elk::M1API::KeypadFkeyStatus *arg1 = (Elk::M1API::KeypadFkeyStatus *) 0 ;
  enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *result = 0 ;
  
  arg1 = (Elk::M1API::KeypadFkeyStatus *)jarg1; 
  result = (enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *)(enum Elk::M1API::KeypadFkeyStatus::FkeyIllumination *) ((arg1)->illumination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_KeypadFkeyStatus_codeRequiredForBypass_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::KeypadFkeyStatus *arg1 = (Elk::M1API::KeypadFkeyStatus *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::KeypadFkeyStatus *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->codeRequiredForBypass = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_KeypadFkeyStatus_codeRequiredForBypass_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::KeypadFkeyStatus *arg1 = (Elk::M1API::KeypadFkeyStatus *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::KeypadFkeyStatus *)jarg1; 
  result = (bool) ((arg1)->codeRequiredForBypass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_KeypadFkeyStatus() {
  void * jresult ;
  Elk::M1API::KeypadFkeyStatus *result = 0 ;
  
  result = (Elk::M1API::KeypadFkeyStatus *)new Elk::M1API::KeypadFkeyStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_KeypadFkeyStatus(void * jarg1) {
  Elk::M1API::KeypadFkeyStatus *arg1 = (Elk::M1API::KeypadFkeyStatus *) 0 ;
  
  arg1 = (Elk::M1API::KeypadFkeyStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_UserCodeAccess_codetype_set(void * jarg1, int jarg2) {
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  enum Elk::M1API::UserCodeAccess::CodeType arg2 ;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  arg2 = (enum Elk::M1API::UserCodeAccess::CodeType)jarg2; 
  if (arg1) (arg1)->codetype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_UserCodeAccess_codetype_get(void * jarg1) {
  int jresult ;
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  enum Elk::M1API::UserCodeAccess::CodeType result;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  result = (enum Elk::M1API::UserCodeAccess::CodeType) ((arg1)->codetype);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_UserCodeAccess_usesCelcius_set(void * jarg1, unsigned int jarg2) {
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  bool arg2 ;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->usesCelcius = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_UserCodeAccess_usesCelcius_get(void * jarg1) {
  unsigned int jresult ;
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  bool result;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  result = (bool) ((arg1)->usesCelcius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_UserCodeAccess_validAreas_set(void * jarg1, unsigned char jarg2) {
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->validAreas = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_M1API_UserCodeAccess_validAreas_get(void * jarg1) {
  unsigned char jresult ;
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  uint8_t result;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  result = (uint8_t) ((arg1)->validAreas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1API_UserCodeAccess() {
  void * jresult ;
  Elk::M1API::UserCodeAccess *result = 0 ;
  
  result = (Elk::M1API::UserCodeAccess *)new Elk::M1API::UserCodeAccess();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API_UserCodeAccess(void * jarg1) {
  Elk::M1API::UserCodeAccess *arg1 = (Elk::M1API::UserCodeAccess *) 0 ;
  
  arg1 = (Elk::M1API::UserCodeAccess *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_onRPConnection_set(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::function< void (bool) > arg2 ;
  std::function< void (bool) > *argp2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::function< void (bool) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (bool) >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->onRPConnection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_onRPConnection_get(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::function< void (bool) > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result =  ((arg1)->onRPConnection);
  jresult = new std::function< void (bool) >((const std::function< void (bool) > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_forEachConfiguredZone(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::function< void (int) > arg2 ;
  std::function< void (int) > *argp2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::function< void (int) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (int) >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->forEachConfiguredZone(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_forEachConfiguredKeypad(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::function< void (int) > arg2 ;
  std::function< void (int) > *argp2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::function< void (int) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (int) >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->forEachConfiguredKeypad(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_forEachConfiguredTempDevice(void * jarg1, void * jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::function< void (Elk::M1API::TemperatureDevice,int) > arg2 ;
  std::function< void (Elk::M1API::TemperatureDevice,int) > *argp2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::function< void (Elk::M1API::TemperatureDevice,int) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (Elk::M1API::TemperatureDevice,int) >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->forEachConfiguredTempDevice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_armDisarm(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::ArmMode arg3 ;
  std::string arg4 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::ArmMode)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg4)->assign(jarg4); 
  (arg1)->armDisarm(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getArmStatus(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  SwigValueWrapper< std::vector< Elk::M1API::ArmStatus > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getArmStatus();
  jresult = new std::vector< Elk::M1API::ArmStatus >((const std::vector< Elk::M1API::ArmStatus > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneAlarms(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  SwigValueWrapper< std::vector< enum Elk::M1API::ZoneDefinition > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneAlarms();
  jresult = new std::vector< Elk::M1API::ZoneDefinition >((const std::vector< Elk::M1API::ZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getAudioData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::AudioData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getAudioData(arg2);
  jresult = new Elk::M1API::AudioData((const Elk::M1API::AudioData &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_enableControlOutput(void * jarg1, int jarg2, unsigned short jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->enableControlOutput(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_disableControlOutput(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->disableControlOutput(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_toggleControlOutput(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->toggleControlOutput(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getControlOutputs(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< bool > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getControlOutputs();
  jresult = new std::vector< bool >((const std::vector< bool > &)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_getCustomValue(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCustomValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getCustomValues(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< uint16_t > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getCustomValues();
  jresult = new std::vector< uint16_t >((const std::vector< uint16_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setCustomValue(void * jarg1, int jarg2, unsigned short jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->setCustomValue(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_requestChangeUserCode(void * jarg1, int jarg2, char * jarg3, char * jarg4, unsigned char jarg5) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  uint8_t arg5 ;
  Elk::M1API::UserCodeSuccess result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  arg5 = (uint8_t)jarg5; 
  result = (Elk::M1API::UserCodeSuccess)(arg1)->requestChangeUserCode(arg2,arg3,arg4,arg5);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_getCounterValue(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCounterValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1API_setCounterValue(void * jarg1, int jarg2, unsigned short jarg3) {
  unsigned short jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  uint16_t arg3 ;
  uint16_t result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint16_t)jarg3; 
  result = (uint16_t)(arg1)->setCounterValue(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_displayLCDText__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_displayLCDText__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6, char * jarg7) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_getLightingStatus(void * jarg1, int jarg2) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getLightingStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getKeypadAreas(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getKeypadAreas();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getKeypadFkeyStatus(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::KeypadFkeyStatus result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getKeypadFkeyStatus(arg2);
  jresult = new Elk::M1API::KeypadFkeyStatus((const Elk::M1API::KeypadFkeyStatus &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_pressFunctionKey(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::FKEY arg3 ;
  SwigValueWrapper< std::vector< enum Elk::M1API::ChimeMode > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::FKEY)jarg3; 
  result = (arg1)->pressFunctionKey(arg2,arg3);
  jresult = new std::vector< Elk::M1API::ChimeMode >((const std::vector< Elk::M1API::ChimeMode > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getLogData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::LogEntry result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getLogData(arg2);
  jresult = new Elk::M1API::LogEntry((const Elk::M1API::LogEntry &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getLogs(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  SwigValueWrapper< std::vector< Elk::M1API::LogEntry > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getLogs();
  jresult = new std::vector< Elk::M1API::LogEntry >((const std::vector< Elk::M1API::LogEntry > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setLogData(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->setLogData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_executePLCCommand(void * jarg1, char jarg2, int jarg3, int jarg4, int jarg5, int jarg6) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->executePLCCommand(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_setPLCState(void * jarg1, char jarg2, int jarg3, unsigned int jarg4) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->setPLCState(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_togglePLCState(void * jarg1, char jarg2, int jarg3) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  char arg2 ;
  int arg3 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->togglePLCState(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getPLCStatus(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getPLCStatus(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getRTCData(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::RTCData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getRTCData();
  jresult = new Elk::M1API::RTCData((const Elk::M1API::RTCData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_setRTCData(void * jarg1, void * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::RTCData arg2 ;
  Elk::M1API::RTCData *argp2 ;
  Elk::M1API::RTCData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (Elk::M1API::RTCData *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Elk::M1API::RTCData", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->setRTCData(arg2);
  jresult = new Elk::M1API::RTCData((const Elk::M1API::RTCData &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_M1API_getTextDescription(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::TextDescriptionType arg2 ;
  int arg3 ;
  std::string result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::M1API::TextDescriptionType)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->getTextDescription(arg2,arg3);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getSystemTroubleStatus(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::SystemTroubleStatus result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getSystemTroubleStatus();
  jresult = new Elk::M1API::SystemTroubleStatus((const Elk::M1API::SystemTroubleStatus &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1API_getTemperature(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::TemperatureDevice arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::M1API::TemperatureDevice)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getTemperature(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getTemperatures(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::M1API::TemperatureDevice arg2 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::M1API::TemperatureDevice)jarg2; 
  result = (arg1)->getTemperatures(arg2);
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_speakWord(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenWord arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::SirenWord)jarg2; 
  (arg1)->speakWord(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_speakPhrase(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  Elk::SirenPhrase arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (Elk::SirenPhrase)jarg2; 
  (arg1)->speakPhrase(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getOmnistat2Data(void * jarg1, void * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< char > arg2 ;
  std::vector< char > *argp2 ;
  std::vector< char > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->getOmnistat2Data(arg2);
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1API_activateTask(void * jarg1, int jarg2) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->activateTask(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getThermostatData(void * jarg1, int jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  Elk::M1API::ThermostatData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->getThermostatData(arg2);
  jresult = new Elk::M1API::ThermostatData((const Elk::M1API::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_setThermostatData(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  Elk::M1API::ThermostatData result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (arg1)->setThermostatData(arg2,arg3,arg4);
  jresult = new Elk::M1API::ThermostatData((const Elk::M1API::ThermostatData &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getUserCodeAccess(void * jarg1, char * jarg2) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::string arg2 ;
  Elk::M1API::UserCodeAccess result;
  
  arg1 = (Elk::M1API *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->getUserCodeAccess(arg2);
  jresult = new Elk::M1API::UserCodeAccess((const Elk::M1API::UserCodeAccess &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getM1VersionNumber(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getM1VersionNumber();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_zoneBypass(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->zoneBypass(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1API_setAreaBypass(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  std::string arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->setAreaBypass(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneDefinitions(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  SwigValueWrapper< std::vector< enum Elk::M1API::ZoneDefinition > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneDefinitions();
  jresult = new std::vector< Elk::M1API::ZoneDefinition >((const std::vector< Elk::M1API::ZoneDefinition > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZonePartitions(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  std::vector< int > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZonePartitions();
  jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1API_getZoneStatuses(void * jarg1) {
  void * jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  SwigValueWrapper< std::vector< Elk::M1API::ZoneState > > result;
  
  arg1 = (Elk::M1API *)jarg1; 
  result = (arg1)->getZoneStatuses();
  jresult = new std::vector< Elk::M1API::ZoneState >((const std::vector< Elk::M1API::ZoneState > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_M1API_getZoneVoltage(void * jarg1, int jarg2) {
  float jresult ;
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Elk::M1API *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getZoneVoltage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1API(void * jarg1) {
  Elk::M1API *arg1 = (Elk::M1API *) 0 ;
  
  arg1 = (Elk::M1API *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Monitor_run(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  (arg1)->run();
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Monitor_stop(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  (arg1)->stop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1Monitor(void * jarg1) {
  Elk::M1Monitor *arg1 = (Elk::M1Monitor *) 0 ;
  
  arg1 = (Elk::M1Monitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_onRPConnection_set(void * jarg1, void * jarg2) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  std::function< void (bool) > arg2 ;
  std::function< void (bool) > *argp2 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  argp2 = (std::function< void (bool) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (bool) >", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->onRPConnection = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1AsciiAPI_onRPConnection_get(void * jarg1) {
  void * jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  std::function< void (bool) > result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  result =  ((arg1)->onRPConnection);
  jresult = new std::function< void (bool) >((const std::function< void (bool) > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_M1AsciiAPI(void * jarg1) {
  void * jresult ;
  std::shared_ptr< Elk::M1Connection > arg1 ;
  Elk::M1AsciiAPI *result = 0 ;
  
  if (jarg1) arg1 = *(std::shared_ptr< Elk::M1Connection > *)jarg1; 
  result = (Elk::M1AsciiAPI *)new Elk::M1AsciiAPI(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_collectAllNames(void * jarg1) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  (arg1)->collectAllNames();
}


SWIGEXPORT float SWIGSTDCALL CSharp_M1AsciiAPI_getZoneVoltage__SWIG_0(void * jarg1, int jarg2) {
  float jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->getZoneVoltage(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_M1AsciiAPI_getZoneVoltage__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  float jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  float result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (float)(arg1)->getZoneVoltage(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1AsciiAPI_getLightingStatus__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->getLightingStatus(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_M1AsciiAPI_getLightingStatus__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  int jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->getLightingStatus(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1AsciiAPI_getArmStatus__SWIG_0(void * jarg1) {
  void * jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  SwigValueWrapper< std::vector< Elk::M1API::ArmStatus > > result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  result = (arg1)->getArmStatus();
  jresult = new std::vector< Elk::M1API::ArmStatus >((const std::vector< Elk::M1API::ArmStatus > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1AsciiAPI_getArmStatus__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  bool arg2 ;
  int arg3 ;
  SwigValueWrapper< std::vector< Elk::M1API::ArmStatus > > result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (arg1)->getArmStatus(arg2,arg3);
  jresult = new std::vector< Elk::M1API::ArmStatus >((const std::vector< Elk::M1API::ArmStatus > &)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1AsciiAPI_getCounterValue__SWIG_0(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCounterValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1AsciiAPI_getCounterValue__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  unsigned short jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  uint16_t result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (uint16_t)(arg1)->getCounterValue(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1AsciiAPI_getCustomValue__SWIG_0(void * jarg1, int jarg2) {
  unsigned short jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  uint16_t result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint16_t)(arg1)->getCustomValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_M1AsciiAPI_getCustomValue__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3, int jarg4) {
  unsigned short jresult ;
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  uint16_t result;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (uint16_t)(arg1)->getCustomValue(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_displayLCDText__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::M1API::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1AsciiAPI_displayLCDText__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned short jarg5, char * jarg6, char * jarg7) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  int arg2 ;
  Elk::M1API::clearMethod arg3 ;
  bool arg4 ;
  uint16_t arg5 ;
  std::string arg6 ;
  std::string arg7 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Elk::M1API::clearMethod)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (uint16_t)jarg5; 
  if (!jarg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg6)->assign(jarg6); 
  if (!jarg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg7)->assign(jarg7); 
  (arg1)->displayLCDText(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1AsciiAPI(void * jarg1) {
  Elk::M1AsciiAPI *arg1 = (Elk::M1AsciiAPI *) 0 ;
  
  arg1 = (Elk::M1AsciiAPI *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_M1Connection_Connect(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::string arg2 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->Connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Connection_Disconnect(void * jarg1) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Disconnect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_M1Connection_Send(void * jarg1, void * jarg2) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::vector< char > arg2 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::vector< char > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< char >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->Send(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_M1Connection_Recieve(void * jarg1) {
  void * jresult ;
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  std::vector< char > result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->Recieve();
  jresult = new std::vector< char >((const std::vector< char > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_M1Connection(void * jarg1) {
  Elk::M1Connection *arg1 = (Elk::M1Connection *) 0 ;
  std::shared_ptr< Elk::M1Connection > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::M1Connection > *)jarg1;
  arg1 = (Elk::M1Connection *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ElkTCP_Connect__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Elk::ElkTCP *arg1 = (Elk::ElkTCP *) 0 ;
  std::string arg2 ;
  std::shared_ptr< Elk::ElkTCP > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::ElkTCP > *)jarg1;
  arg1 = (Elk::ElkTCP *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->Connect(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ElkTCP_Connect__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  Elk::ElkTCP *arg1 = (Elk::ElkTCP *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::shared_ptr< Elk::ElkTCP > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (std::shared_ptr<  Elk::ElkTCP > *)jarg1;
  arg1 = (Elk::ElkTCP *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->Connect(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ElkTCP() {
  void * jresult ;
  Elk::ElkTCP *result = 0 ;
  
  result = (Elk::ElkTCP *)new Elk::ElkTCP();
  
  jresult = result ? new std::shared_ptr<  Elk::ElkTCP >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ElkTCP(void * jarg1) {
  Elk::ElkTCP *arg1 = (Elk::ElkTCP *) 0 ;
  std::shared_ptr< Elk::ElkTCP > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Elk::ElkTCP > *)jarg1;
  arg1 = (Elk::ElkTCP *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT Elk::M1Monitor * SWIGSTDCALL CSharp_M1AsciiAPI_SWIGUpcast(Elk::M1AsciiAPI *jarg1) {
    return (Elk::M1Monitor *)jarg1;
}

SWIGEXPORT std::shared_ptr< Elk::M1Connection > * SWIGSTDCALL CSharp_ElkTCP_SWIGSmartPtrUpcast(std::shared_ptr< Elk::ElkTCP > *jarg1) {
    return jarg1 ? new std::shared_ptr< Elk::M1Connection >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

